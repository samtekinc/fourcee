package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// CreateOrgUnit is the resolver for the createOrgUnit field.
func (r *mutationResolver) CreateOrgUnit(ctx context.Context, orgUnit models.NewOrgUnit) (*models.OrgUnit, error) {
	return r.apiClient.CreateOrgUnit(ctx, &orgUnit)
}

// DeleteOrgUnit is the resolver for the deleteOrgUnit field.
func (r *mutationResolver) DeleteOrgUnit(ctx context.Context, orgUnitID uint) (bool, error) {
	err := r.apiClient.DeleteOrgUnit(ctx, orgUnitID)
	return err == nil, err
}

// UpdateOrgUnit is the resolver for the updateOrgUnit field.
func (r *mutationResolver) UpdateOrgUnit(ctx context.Context, orgUnitID uint, update models.OrgUnitUpdate) (*models.OrgUnit, error) {
	return r.apiClient.UpdateOrgUnit(ctx, orgUnitID, &update)
}

// AddAccountToOrgUnit is the resolver for the addAccountToOrgUnit field.
func (r *mutationResolver) AddAccountToOrgUnit(ctx context.Context, orgUnitID uint, orgAccountID uint) (bool, error) {
	err := r.apiClient.AddAccountToOrgUnit(ctx, orgUnitID, orgAccountID)
	return err == nil, err
}

// RemoveAccountFromOrgUnit is the resolver for the removeAccountFromOrgUnit field.
func (r *mutationResolver) RemoveAccountFromOrgUnit(ctx context.Context, orgUnitID uint, orgAccountID uint) (bool, error) {
	err := r.apiClient.RemoveAccountFromOrgUnit(ctx, orgUnitID, orgAccountID)
	return err == nil, err
}

// OrgDimension is the resolver for the orgDimension field.
func (r *orgUnitResolver) OrgDimension(ctx context.Context, obj *models.OrgUnit) (*models.OrgDimension, error) {
	return r.apiClient.GetOrgDimensionBatched(ctx, obj.OrgDimensionID)
}

// ParentOrgUnit is the resolver for the parentOrgUnit field.
func (r *orgUnitResolver) ParentOrgUnit(ctx context.Context, obj *models.OrgUnit) (*models.OrgUnit, error) {
	if obj.ParentOrgUnitID == nil {
		return nil, nil
	}
	return r.apiClient.GetOrgUnitBatched(ctx, *obj.ParentOrgUnitID)
}

// Children is the resolver for the children field.
func (r *orgUnitResolver) Children(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error) {
	return r.apiClient.GetOrgUnitsForParent(ctx, obj.ID, filters, limit, offset)
}

// DownstreamOrgUnits is the resolver for the downstreamOrgUnits field.
func (r *orgUnitResolver) DownstreamOrgUnits(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error) {
	return r.apiClient.GetDownstreamOrgUnits(ctx, obj.ID, filters, limit, offset)
}

// UpstreamOrgUnits is the resolver for the upstreamOrgUnits field.
func (r *orgUnitResolver) UpstreamOrgUnits(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error) {
	return r.apiClient.GetUpstreamOrgUnits(ctx, obj.ID, filters, limit, offset)
}

// OrgAccounts is the resolver for the orgAccounts field.
func (r *orgUnitResolver) OrgAccounts(ctx context.Context, obj *models.OrgUnit, filters *models.OrgAccountFilters, limit *int, offset *int) ([]*models.OrgAccount, error) {
	return r.apiClient.GetOrgAccountsForOrgUnit(ctx, obj.ID, filters, limit, offset)
}

// ModulePropagations is the resolver for the modulePropagations field.
func (r *orgUnitResolver) ModulePropagations(ctx context.Context, obj *models.OrgUnit, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error) {
	return r.apiClient.GetModulePropagationsForOrgUnit(ctx, obj.ID, filters, limit, offset)
}

// OrgUnit is the resolver for the orgUnit field.
func (r *queryResolver) OrgUnit(ctx context.Context, orgUnitID uint) (*models.OrgUnit, error) {
	return r.apiClient.GetOrgUnit(ctx, orgUnitID)
}

// OrgUnit returns generated.OrgUnitResolver implementation.
func (r *Resolver) OrgUnit() generated.OrgUnitResolver { return &orgUnitResolver{r} }

type orgUnitResolver struct{ *Resolver }
