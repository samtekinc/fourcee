package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"encoding/base64"

	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// Stdout is the resolver for the Stdout field.
func (r *terraformApplyOutputResolver) Stdout(ctx context.Context, obj *models.TerraformApplyOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stdout)
	return &str, nil
}

// Stderr is the resolver for the Stderr field.
func (r *terraformApplyOutputResolver) Stderr(ctx context.Context, obj *models.TerraformApplyOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stderr)
	return &str, nil
}

// Stdout is the resolver for the Stdout field.
func (r *terraformInitOutputResolver) Stdout(ctx context.Context, obj *models.TerraformInitOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stdout)
	return &str, nil
}

// Stderr is the resolver for the Stderr field.
func (r *terraformInitOutputResolver) Stderr(ctx context.Context, obj *models.TerraformInitOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stderr)
	return &str, nil
}

// Stdout is the resolver for the Stdout field.
func (r *terraformPlanOutputResolver) Stdout(ctx context.Context, obj *models.TerraformPlanOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stdout)
	return &str, nil
}

// Stderr is the resolver for the Stderr field.
func (r *terraformPlanOutputResolver) Stderr(ctx context.Context, obj *models.TerraformPlanOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.Stderr)
	return &str, nil
}

// PlanFile is the resolver for the PlanFile field.
func (r *terraformPlanOutputResolver) PlanFile(ctx context.Context, obj *models.TerraformPlanOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.PlanFile)
	return &str, nil
}

// PlanJSON is the resolver for the PlanJSON field.
func (r *terraformPlanOutputResolver) PlanJSON(ctx context.Context, obj *models.TerraformPlanOutput) (*string, error) {
	str := base64.StdEncoding.EncodeToString(obj.PlanJSON)
	return &str, nil
}

// TerraformApplyOutput returns generated.TerraformApplyOutputResolver implementation.
func (r *Resolver) TerraformApplyOutput() generated.TerraformApplyOutputResolver {
	return &terraformApplyOutputResolver{r}
}

// TerraformInitOutput returns generated.TerraformInitOutputResolver implementation.
func (r *Resolver) TerraformInitOutput() generated.TerraformInitOutputResolver {
	return &terraformInitOutputResolver{r}
}

// TerraformPlanOutput returns generated.TerraformPlanOutputResolver implementation.
func (r *Resolver) TerraformPlanOutput() generated.TerraformPlanOutputResolver {
	return &terraformPlanOutputResolver{r}
}

type terraformApplyOutputResolver struct{ *Resolver }
type terraformInitOutputResolver struct{ *Resolver }
type terraformPlanOutputResolver struct{ *Resolver }
