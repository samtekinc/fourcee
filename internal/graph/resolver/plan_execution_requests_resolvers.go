package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// ModuleAssignment is the resolver for the moduleAssignment field.
func (r *planExecutionRequestResolver) ModuleAssignment(ctx context.Context, obj *models.PlanExecutionRequest) (*models.ModuleAssignment, error) {
	return r.apiClient.GetModuleAssignmentBatched(ctx, obj.ModuleAssignmentId)
}

// InitOutput is the resolver for the initOutput field.
func (r *planExecutionRequestResolver) InitOutput(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error) {
	if obj.InitOutputKey == nil {
		return nil, nil
	}
	output, err := r.apiClient.DownloadResultObject(ctx, *obj.InitOutputKey)
	if err != nil {
		return nil, err
	}
	outputString := string(output)
	return &outputString, nil
}

// PlanOutput is the resolver for the planOutput field.
func (r *planExecutionRequestResolver) PlanOutput(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error) {
	if obj.PlanOutputKey == nil {
		return nil, nil
	}
	output, err := r.apiClient.DownloadResultObject(ctx, *obj.PlanOutputKey)
	if err != nil {
		return nil, err
	}
	outputString := string(output)
	return &outputString, nil
}

// PlanFile is the resolver for the planFile field.
func (r *planExecutionRequestResolver) PlanFile(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error) {
	if obj.PlanFileKey == nil {
		return nil, nil
	}
	output, err := r.apiClient.DownloadResultObject(ctx, *obj.PlanFileKey)
	if err != nil {
		return nil, err
	}
	outputString := string(output)
	return &outputString, nil
}

// PlanJSON is the resolver for the planJSON field.
func (r *planExecutionRequestResolver) PlanJSON(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error) {
	if obj.PlanJSONKey == nil {
		return nil, nil
	}
	output, err := r.apiClient.DownloadResultObject(ctx, *obj.PlanJSONKey)
	if err != nil {
		return nil, err
	}
	outputString := string(output)
	return &outputString, nil
}

// PlanExecutionRequest is the resolver for the planExecutionRequest field.
func (r *queryResolver) PlanExecutionRequest(ctx context.Context, planExecutionRequestID string, withOutputs *bool) (*models.PlanExecutionRequest, error) {
	return r.apiClient.GetPlanExecutionRequest(ctx, planExecutionRequestID)
}

// PlanExecutionRequests is the resolver for the planExecutionRequests field.
func (r *queryResolver) PlanExecutionRequests(ctx context.Context, limit *int, nextCursor *string, withOutputs *bool) (*models.PlanExecutionRequests, error) {
	if limit == nil {
		limit = aws.Int(100)
	}

	return r.apiClient.GetPlanExecutionRequests(ctx, int32(*limit), aws.ToString(nextCursor))
}

// PlanExecutionRequest returns generated.PlanExecutionRequestResolver implementation.
func (r *Resolver) PlanExecutionRequest() generated.PlanExecutionRequestResolver {
	return &planExecutionRequestResolver{r}
}

type planExecutionRequestResolver struct{ *Resolver }
