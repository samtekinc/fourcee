package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// CreateOrgAccount is the resolver for the createOrgAccount field.
func (r *mutationResolver) CreateOrgAccount(ctx context.Context, orgAccount models.NewOrgAccount) (*models.OrgAccount, error) {
	return r.apiClient.CreateOrgAccount(ctx, &orgAccount)
}

// DeleteOrgAccount is the resolver for the deleteOrgAccount field.
func (r *mutationResolver) DeleteOrgAccount(ctx context.Context, orgAccountID uint) (bool, error) {
	err := r.apiClient.DeleteOrgAccount(ctx, orgAccountID)
	return err == nil, err
}

// UpdateOrgAccount is the resolver for the updateOrgAccount field.
func (r *mutationResolver) UpdateOrgAccount(ctx context.Context, orgAccountID uint, orgAccount models.OrgAccountUpdate) (*models.OrgAccount, error) {
	return r.apiClient.UpdateOrgAccount(ctx, orgAccountID, &orgAccount)
}

// OrgUnits is the resolver for the orgUnits field.
func (r *orgAccountResolver) OrgUnits(ctx context.Context, obj *models.OrgAccount, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error) {
	return r.apiClient.GetOrgUnitsForOrgAccount(ctx, obj.ID, filters, limit, offset)
}

// ModuleAssignments is the resolver for the moduleAssignments field.
func (r *orgAccountResolver) ModuleAssignments(ctx context.Context, obj *models.OrgAccount, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error) {
	return r.apiClient.GetModuleAssignmentsForOrgAccount(ctx, obj.ID, filters, limit, offset)
}

// OrgAccount is the resolver for the orgAccount field.
func (r *queryResolver) OrgAccount(ctx context.Context, orgAccountID uint) (*models.OrgAccount, error) {
	return r.apiClient.GetOrgAccount(ctx, orgAccountID)
}

// OrgAccounts is the resolver for the orgAccounts field.
func (r *queryResolver) OrgAccounts(ctx context.Context, filters *models.OrgAccountFilters, limit *int, offset *int) ([]*models.OrgAccount, error) {
	return r.apiClient.GetOrgAccounts(ctx, filters, limit, offset)
}

// OrgAccount returns generated.OrgAccountResolver implementation.
func (r *Resolver) OrgAccount() generated.OrgAccountResolver { return &orgAccountResolver{r} }

type orgAccountResolver struct{ *Resolver }
