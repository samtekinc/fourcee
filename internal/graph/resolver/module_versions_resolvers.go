package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// ModuleGroup is the resolver for the moduleGroup field.
func (r *moduleVersionResolver) ModuleGroup(ctx context.Context, obj *models.ModuleVersion) (*models.ModuleGroup, error) {
	return r.apiClient.GetModuleGroupBatched(ctx, obj.ModuleGroupID)
}

// ModulePropagations is the resolver for the modulePropagations field.
func (r *moduleVersionResolver) ModulePropagations(ctx context.Context, obj *models.ModuleVersion, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error) {
	return r.apiClient.GetModulePropagationsForModuleVersion(ctx, obj.ID, filters, limit, offset)
}

// ModuleAssignments is the resolver for the moduleAssignments field.
func (r *moduleVersionResolver) ModuleAssignments(ctx context.Context, obj *models.ModuleVersion, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error) {
	return r.apiClient.GetModuleAssignmentsForModuleVersion(ctx, obj.ID, filters, limit, offset)
}

// CreateModuleVersion is the resolver for the createModuleVersion field.
func (r *mutationResolver) CreateModuleVersion(ctx context.Context, moduleVersion models.NewModuleVersion) (*models.ModuleVersion, error) {
	return r.apiClient.CreateModuleVersion(ctx, &moduleVersion)
}

// DeleteModuleVersion is the resolver for the deleteModuleVersion field.
func (r *mutationResolver) DeleteModuleVersion(ctx context.Context, moduleVersionID uint) (bool, error) {
	err := r.apiClient.DeleteModuleVersion(ctx, moduleVersionID)
	return err == nil, err
}

// ModuleVersion is the resolver for the moduleVersion field.
func (r *queryResolver) ModuleVersion(ctx context.Context, moduleVersionID uint) (*models.ModuleVersion, error) {
	return r.apiClient.GetModuleVersion(ctx, moduleVersionID)
}

// ModuleVersions is the resolver for the moduleVersions field.
func (r *queryResolver) ModuleVersions(ctx context.Context, filters *models.ModuleVersionFilters, limit *int, offset *int) ([]*models.ModuleVersion, error) {
	return r.apiClient.GetModuleVersions(ctx, filters, limit, offset)
}

// ModuleVersion returns generated.ModuleVersionResolver implementation.
func (r *Resolver) ModuleVersion() generated.ModuleVersionResolver { return &moduleVersionResolver{r} }

type moduleVersionResolver struct{ *Resolver }
