package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/internal/terraform"
	"github.com/sheacloud/tfom/pkg/models"
)

// ModuleVersion is the resolver for the moduleVersion field.
func (r *moduleAssignmentResolver) ModuleVersion(ctx context.Context, obj *models.ModuleAssignment) (*models.ModuleVersion, error) {
	return r.apiClient.GetModuleVersion(ctx, obj.ModuleGroupId, obj.ModuleVersionId)
}

// ModuleGroup is the resolver for the moduleGroup field.
func (r *moduleAssignmentResolver) ModuleGroup(ctx context.Context, obj *models.ModuleAssignment) (*models.ModuleGroup, error) {
	return r.apiClient.GetModuleGroup(ctx, obj.ModuleGroupId)
}

// OrgAccount is the resolver for the orgAccount field.
func (r *moduleAssignmentResolver) OrgAccount(ctx context.Context, obj *models.ModuleAssignment) (*models.OrganizationalAccount, error) {
	return r.apiClient.GetOrganizationalAccount(ctx, obj.OrgAccountId)
}

// ModulePropagation is the resolver for the modulePropagation field.
func (r *moduleAssignmentResolver) ModulePropagation(ctx context.Context, obj *models.ModuleAssignment) (*models.ModulePropagation, error) {
	if obj.ModulePropagationId == nil {
		return nil, nil
	}
	return r.apiClient.GetModulePropagation(ctx, *obj.ModulePropagationId)
}

// TerraformDriftCheckWorkflowRequests is the resolver for the terraformDriftCheckWorkflowRequests field.
func (r *moduleAssignmentResolver) TerraformDriftCheckWorkflowRequests(ctx context.Context, obj *models.ModuleAssignment, limit *int, nextCursor *string) (*models.TerraformDriftCheckWorkflowRequests, error) {
	if limit == nil {
		limit = aws.Int(100)
	}
	return r.apiClient.GetTerraformDriftCheckWorkflowRequestsByModuleAssignmentId(ctx, obj.ModuleAssignmentId, int32(*limit), aws.ToString(nextCursor))
}

// TerraformExecutionWorkflowRequests is the resolver for the terraformExecutionWorkflowRequests field.
func (r *moduleAssignmentResolver) TerraformExecutionWorkflowRequests(ctx context.Context, obj *models.ModuleAssignment, limit *int, nextCursor *string) (*models.TerraformExecutionWorkflowRequests, error) {
	if limit == nil {
		limit = aws.Int(100)
	}
	return r.apiClient.GetTerraformExecutionWorkflowRequestsByModuleAssignmentId(ctx, obj.ModuleAssignmentId, int32(*limit), aws.ToString(nextCursor))
}

// PlanExecutionRequests is the resolver for the planExecutionRequests field.
func (r *moduleAssignmentResolver) PlanExecutionRequests(ctx context.Context, obj *models.ModuleAssignment, limit *int, nextCursor *string) (*models.PlanExecutionRequests, error) {
	if limit == nil {
		limit = aws.Int(100)
	}
	return r.apiClient.GetPlanExecutionRequestsByModuleAssignmentId(ctx, obj.ModuleAssignmentId, int32(*limit), aws.ToString(nextCursor))
}

// ApplyExecutionRequests is the resolver for the applyExecutionRequests field.
func (r *moduleAssignmentResolver) ApplyExecutionRequests(ctx context.Context, obj *models.ModuleAssignment, limit *int, nextCursor *string) (*models.ApplyExecutionRequests, error) {
	if limit == nil {
		limit = aws.Int(100)
	}
	return r.apiClient.GetApplyExecutionRequestsByModuleAssignmentId(ctx, obj.ModuleAssignmentId, int32(*limit), aws.ToString(nextCursor))
}

// TerraformConfiguration is the resolver for the terraformConfiguration field.
func (r *moduleAssignmentResolver) TerraformConfiguration(ctx context.Context, obj *models.ModuleAssignment) (string, error) {
	var modulePropagation *models.ModulePropagation
	var err error
	if obj.ModulePropagationId != nil {
		modulePropagation, err = r.apiClient.GetModulePropagation(ctx, *obj.ModulePropagationId)
		if err != nil {
			return "", err
		}
	}

	moduleVersion, err := r.apiClient.GetModuleVersion(ctx, obj.ModuleGroupId, obj.ModuleVersionId)
	if err != nil {
		return "", err
	}

	orgAccount, err := r.apiClient.GetOrganizationalAccount(ctx, obj.OrgAccountId)
	if err != nil {
		return "", err
	}

	terraformConfig, err := terraform.GetTerraformConfigurationBase64(&terraform.TerraformConfigurationInput{
		ModuleAssignment:  obj,
		ModulePropagation: modulePropagation,
		ModuleVersion:     moduleVersion,
		OrgAccount:        orgAccount,
	})

	return terraformConfig, err
}

// ModuleAssignment is the resolver for the moduleAssignment field.
func (r *queryResolver) ModuleAssignment(ctx context.Context, moduleAssignmentID string) (*models.ModuleAssignment, error) {
	return r.apiClient.GetModuleAssignment(ctx, moduleAssignmentID)
}

// ModuleAssignments is the resolver for the moduleAssignments field.
func (r *queryResolver) ModuleAssignments(ctx context.Context, limit *int, nextCursor *string) (*models.ModuleAssignments, error) {
	if limit == nil {
		limit = aws.Int(100)
	}
	return r.apiClient.GetModuleAssignments(ctx, int32(*limit), aws.ToString(nextCursor))
}

// ModuleAssignment returns generated.ModuleAssignmentResolver implementation.
func (r *Resolver) ModuleAssignment() generated.ModuleAssignmentResolver {
	return &moduleAssignmentResolver{r}
}

type moduleAssignmentResolver struct{ *Resolver }
