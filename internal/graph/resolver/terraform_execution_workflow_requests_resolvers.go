package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/sheacloud/tfom/internal/graph/generated"
	"github.com/sheacloud/tfom/pkg/models"
)

// ModulePropagationExecutionRequest is the resolver for the modulePropagationExecutionRequest field.
func (r *terraformExecutionWorkflowRequestResolver) ModulePropagationExecutionRequest(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.ModulePropagationExecutionRequest, error) {
	modulePropagationId, err := r.ModulePropagationID(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.apiClient.GetModulePropagationExecutionRequest(ctx, modulePropagationId, obj.ModulePropagationExecutionRequestId)
}

// ModuleAccountAssociation is the resolver for the moduleAccountAssociation field.
func (r *terraformExecutionWorkflowRequestResolver) ModuleAccountAssociation(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.ModuleAccountAssociation, error) {
	key, err := models.ParseModuleAccountAssociationKey(obj.ModuleAccountAssociationKey)
	if err != nil {
		return nil, err
	}
	return r.apiClient.GetModuleAccountAssociation(ctx, key.ModulePropagationId, key.OrgAccountId)
}

// OrgAccountID is the resolver for the orgAccountId field.
func (r *terraformExecutionWorkflowRequestResolver) OrgAccountID(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (string, error) {
	key, err := models.ParseModuleAccountAssociationKey(obj.ModuleAccountAssociationKey)
	if err != nil {
		return "", err
	}
	return key.OrgAccountId, nil
}

// OrgAccount is the resolver for the orgAccount field.
func (r *terraformExecutionWorkflowRequestResolver) OrgAccount(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.OrganizationalAccount, error) {
	orgAccountId, err := r.OrgAccountID(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.apiClient.GetOrganizationalAccount(ctx, orgAccountId)
}

// ModulePropagationID is the resolver for the modulePropagationId field.
func (r *terraformExecutionWorkflowRequestResolver) ModulePropagationID(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (string, error) {
	key, err := models.ParseModuleAccountAssociationKey(obj.ModuleAccountAssociationKey)
	if err != nil {
		return "", err
	}
	return key.ModulePropagationId, nil
}

// ModulePropagation is the resolver for the modulePropagation field.
func (r *terraformExecutionWorkflowRequestResolver) ModulePropagation(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.ModulePropagation, error) {
	modulePropagationId, err := r.ModulePropagationID(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.apiClient.GetModulePropagation(ctx, modulePropagationId)
}

// PlanExecutionRequest is the resolver for the planExecutionRequest field.
func (r *terraformExecutionWorkflowRequestResolver) PlanExecutionRequest(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.PlanExecutionRequest, error) {
	if obj.PlanExecutionRequestId == nil {
		return nil, nil
	}
	return r.apiClient.GetPlanExecutionRequest(ctx, *obj.PlanExecutionRequestId)
}

// ApplyExecutionRequest is the resolver for the applyExecutionRequest field.
func (r *terraformExecutionWorkflowRequestResolver) ApplyExecutionRequest(ctx context.Context, obj *models.TerraformExecutionWorkflowRequest) (*models.ApplyExecutionRequest, error) {
	if obj.ApplyExecutionRequestId == nil {
		return nil, nil
	}
	return r.apiClient.GetApplyExecutionRequest(ctx, *obj.ApplyExecutionRequestId)
}

// TerraformExecutionWorkflowRequest returns generated.TerraformExecutionWorkflowRequestResolver implementation.
func (r *Resolver) TerraformExecutionWorkflowRequest() generated.TerraformExecutionWorkflowRequestResolver {
	return &terraformExecutionWorkflowRequestResolver{r}
}

type terraformExecutionWorkflowRequestResolver struct{ *Resolver }
