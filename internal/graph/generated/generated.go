// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/sheacloud/tfom/pkg/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	ApplyExecutionRequest() ApplyExecutionRequestResolver
	ModuleAssignment() ModuleAssignmentResolver
	ModuleGroup() ModuleGroupResolver
	ModulePropagation() ModulePropagationResolver
	ModulePropagationDriftCheckRequest() ModulePropagationDriftCheckRequestResolver
	ModulePropagationExecutionRequest() ModulePropagationExecutionRequestResolver
	ModuleVersion() ModuleVersionResolver
	Mutation() MutationResolver
	OrgAccount() OrgAccountResolver
	OrgDimension() OrgDimensionResolver
	OrgUnit() OrgUnitResolver
	PlanExecutionRequest() PlanExecutionRequestResolver
	Query() QueryResolver
	TerraformDriftCheckRequest() TerraformDriftCheckRequestResolver
	TerraformExecutionRequest() TerraformExecutionRequestResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ApplyExecutionRequest struct {
		AdditionalArguments          func(childComplexity int) int
		ApplyOutput                  func(childComplexity int) int
		CompletedAt                  func(childComplexity int) int
		ID                           func(childComplexity int) int
		InitOutput                   func(childComplexity int) int
		ModuleAssignment             func(childComplexity int) int
		ModuleAssignmentID           func(childComplexity int) int
		StartedAt                    func(childComplexity int) int
		Status                       func(childComplexity int) int
		TerraformConfigurationBase64 func(childComplexity int) int
		TerraformExecutionRequestID  func(childComplexity int) int
		TerraformPlanBase64          func(childComplexity int) int
		TerraformVersion             func(childComplexity int) int
	}

	Argument struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AwsProviderConfiguration struct {
		Alias  func(childComplexity int) int
		Region func(childComplexity int) int
	}

	GcpProviderConfiguration struct {
		Alias  func(childComplexity int) int
		Region func(childComplexity int) int
	}

	Metadata struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	ModuleAssignment struct {
		Arguments                   func(childComplexity int) int
		AwsProviderConfigurations   func(childComplexity int) int
		Description                 func(childComplexity int) int
		GcpProviderConfigurations   func(childComplexity int) int
		ID                          func(childComplexity int) int
		ModuleGroup                 func(childComplexity int) int
		ModuleGroupID               func(childComplexity int) int
		ModulePropagation           func(childComplexity int) int
		ModulePropagationID         func(childComplexity int) int
		ModuleVersion               func(childComplexity int) int
		ModuleVersionID             func(childComplexity int) int
		Name                        func(childComplexity int) int
		OrgAccount                  func(childComplexity int) int
		OrgAccountID                func(childComplexity int) int
		RemoteStateBucket           func(childComplexity int) int
		RemoteStateKey              func(childComplexity int) int
		RemoteStateRegion           func(childComplexity int) int
		Status                      func(childComplexity int) int
		TerraformConfiguration      func(childComplexity int) int
		TerraformDriftCheckRequests func(childComplexity int, filters *models.TerraformDriftCheckRequestFilters, limit *int, offset *int) int
		TerraformExecutionRequests  func(childComplexity int, filters *models.TerraformExecutionRequestFilters, limit *int, offset *int) int
	}

	ModuleGroup struct {
		CloudPlatform      func(childComplexity int) int
		ID                 func(childComplexity int) int
		ModuleAssignments  func(childComplexity int, filters *models.ModuleAssignmentFilters, limit *int, offset *int) int
		ModulePropagations func(childComplexity int, filters *models.ModulePropagationFilters, limit *int, offset *int) int
		Name               func(childComplexity int) int
		Versions           func(childComplexity int, filters *models.ModuleVersionFilters, limit *int, offset *int) int
	}

	ModulePropagation struct {
		Arguments                 func(childComplexity int) int
		AwsProviderConfigurations func(childComplexity int) int
		Description               func(childComplexity int) int
		DriftCheckRequests        func(childComplexity int, filters *models.ModulePropagationDriftCheckRequestFilters, limit *int, offset *int) int
		ExecutionRequests         func(childComplexity int, filters *models.ModulePropagationExecutionRequestFilters, limit *int, offset *int) int
		GcpProviderConfigurations func(childComplexity int) int
		ID                        func(childComplexity int) int
		ModuleAssignments         func(childComplexity int, filters *models.ModuleAssignmentFilters, limit *int, offset *int) int
		ModuleGroup               func(childComplexity int) int
		ModuleGroupID             func(childComplexity int) int
		ModuleVersion             func(childComplexity int) int
		ModuleVersionID           func(childComplexity int) int
		Name                      func(childComplexity int) int
		OrgDimension              func(childComplexity int) int
		OrgDimensionID            func(childComplexity int) int
		OrgUnit                   func(childComplexity int) int
		OrgUnitID                 func(childComplexity int) int
	}

	ModulePropagationDriftCheckRequest struct {
		CompletedAt                 func(childComplexity int) int
		ID                          func(childComplexity int) int
		ModulePropagation           func(childComplexity int) int
		ModulePropagationID         func(childComplexity int) int
		StartedAt                   func(childComplexity int) int
		Status                      func(childComplexity int) int
		SyncStatus                  func(childComplexity int) int
		TerraformDriftCheckRequests func(childComplexity int, filters *models.TerraformDriftCheckRequestFilters, limit *int, offset *int) int
	}

	ModulePropagationExecutionRequest struct {
		CompletedAt                func(childComplexity int) int
		ID                         func(childComplexity int) int
		ModulePropagation          func(childComplexity int) int
		ModulePropagationID        func(childComplexity int) int
		StartedAt                  func(childComplexity int) int
		Status                     func(childComplexity int) int
		TerraformExecutionRequests func(childComplexity int, filters *models.TerraformExecutionRequestFilters, limit *int, offset *int) int
	}

	ModuleVariable struct {
		Default     func(childComplexity int) int
		Description func(childComplexity int) int
		Name        func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	ModuleVersion struct {
		ID                 func(childComplexity int) int
		ModuleAssignments  func(childComplexity int, filters *models.ModuleAssignmentFilters, limit *int, offset *int) int
		ModuleGroup        func(childComplexity int) int
		ModuleGroupID      func(childComplexity int) int
		ModulePropagations func(childComplexity int, filters *models.ModulePropagationFilters, limit *int, offset *int) int
		Name               func(childComplexity int) int
		RemoteSource       func(childComplexity int) int
		TerraformVersion   func(childComplexity int) int
		Variables          func(childComplexity int) int
	}

	Mutation struct {
		AddAccountToOrgUnit                      func(childComplexity int, orgUnitID uint, orgAccountID uint) int
		CreateModuleAssignment                   func(childComplexity int, moduleAssignment models.NewModuleAssignment) int
		CreateModuleGroup                        func(childComplexity int, moduleGroup models.NewModuleGroup) int
		CreateModulePropagation                  func(childComplexity int, modulePropagation models.NewModulePropagation) int
		CreateModulePropagationDriftCheckRequest func(childComplexity int, modulePropagationDriftCheckRequest models.NewModulePropagationDriftCheckRequest) int
		CreateModulePropagationExecutionRequest  func(childComplexity int, modulePropagationExecutionRequest models.NewModulePropagationExecutionRequest) int
		CreateModuleVersion                      func(childComplexity int, moduleVersion models.NewModuleVersion) int
		CreateOrgAccount                         func(childComplexity int, orgAccount models.NewOrgAccount) int
		CreateOrgDimension                       func(childComplexity int, orgDimension models.NewOrgDimension) int
		CreateOrgUnit                            func(childComplexity int, orgUnit models.NewOrgUnit) int
		CreateTerraformDriftCheckRequest         func(childComplexity int, terraformDriftCheckRequest models.NewTerraformDriftCheckRequest) int
		CreateTerraformExecutionRequest          func(childComplexity int, terraformExecutionRequest models.NewTerraformExecutionRequest) int
		DeleteModuleGroup                        func(childComplexity int, id uint) int
		DeleteModulePropagation                  func(childComplexity int, modulePropagationID uint) int
		DeleteModuleVersion                      func(childComplexity int, moduleVersionID uint) int
		DeleteOrgAccount                         func(childComplexity int, orgAccountID uint) int
		DeleteOrgDimension                       func(childComplexity int, orgDimensionID uint) int
		DeleteOrgUnit                            func(childComplexity int, orgUnitID uint) int
		RemoveAccountFromOrgUnit                 func(childComplexity int, orgUnitID uint, orgAccountID uint) int
		UpdateModuleAssignment                   func(childComplexity int, moduleAssignmentID uint, moduleAssignmentUpdate models.ModuleAssignmentUpdate) int
		UpdateModulePropagation                  func(childComplexity int, modulePropagationID uint, update models.ModulePropagationUpdate) int
		UpdateOrgAccount                         func(childComplexity int, orgAccountID uint, orgAccount models.OrgAccountUpdate) int
		UpdateOrgUnit                            func(childComplexity int, orgUnitID uint, update models.OrgUnitUpdate) int
	}

	OrgAccount struct {
		AssumeRoleName    func(childComplexity int) int
		CloudIdentifier   func(childComplexity int) int
		CloudPlatform     func(childComplexity int) int
		ID                func(childComplexity int) int
		Metadata          func(childComplexity int) int
		ModuleAssignments func(childComplexity int, filters *models.ModuleAssignmentFilters, limit *int, offset *int) int
		Name              func(childComplexity int) int
		OrgUnits          func(childComplexity int, filters *models.OrgUnitFilters, limit *int, offset *int) int
	}

	OrgDimension struct {
		ID                 func(childComplexity int) int
		ModulePropagations func(childComplexity int, filters *models.ModulePropagationFilters, limit *int, offset *int) int
		Name               func(childComplexity int) int
		OrgUnits           func(childComplexity int, filters *models.OrgUnitFilters, limit *int, offset *int) int
		RootOrgUnit        func(childComplexity int) int
	}

	OrgUnit struct {
		Children           func(childComplexity int, filters *models.OrgUnitFilters, limit *int, offset *int) int
		DownstreamOrgUnits func(childComplexity int, filters *models.OrgUnitFilters, limit *int, offset *int) int
		Hierarchy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		ModulePropagations func(childComplexity int, filters *models.ModulePropagationFilters, limit *int, offset *int) int
		Name               func(childComplexity int) int
		OrgAccounts        func(childComplexity int, filters *models.OrgAccountFilters, limit *int, offset *int) int
		OrgDimension       func(childComplexity int) int
		OrgDimensionID     func(childComplexity int) int
		ParentOrgUnit      func(childComplexity int) int
		ParentOrgUnitID    func(childComplexity int) int
		UpstreamOrgUnits   func(childComplexity int, filters *models.OrgUnitFilters, limit *int, offset *int) int
	}

	PlanExecutionRequest struct {
		AdditionalArguments          func(childComplexity int) int
		CompletedAt                  func(childComplexity int) int
		ID                           func(childComplexity int) int
		InitOutput                   func(childComplexity int) int
		ModuleAssignment             func(childComplexity int) int
		ModuleAssignmentID           func(childComplexity int) int
		PlanFile                     func(childComplexity int) int
		PlanJSON                     func(childComplexity int) int
		PlanOutput                   func(childComplexity int) int
		StartedAt                    func(childComplexity int) int
		Status                       func(childComplexity int) int
		TerraformConfigurationBase64 func(childComplexity int) int
		TerraformDriftCheckRequestID func(childComplexity int) int
		TerraformExecutionRequestID  func(childComplexity int) int
		TerraformVersion             func(childComplexity int) int
	}

	Query struct {
		ApplyExecutionRequest               func(childComplexity int, applyExecutionRequestID uint) int
		ModuleAssignment                    func(childComplexity int, moduleAssignmentID uint) int
		ModuleAssignments                   func(childComplexity int, filters *models.ModuleAssignmentFilters, limit *int, offset *int) int
		ModuleGroup                         func(childComplexity int, id uint) int
		ModuleGroups                        func(childComplexity int, filters *models.ModuleGroupFilters, limit *int, offset *int) int
		ModulePropagation                   func(childComplexity int, modulePropagationID uint) int
		ModulePropagationDriftCheckRequest  func(childComplexity int, modulePropagationDriftCheckRequestID uint) int
		ModulePropagationDriftCheckRequests func(childComplexity int, filters *models.ModulePropagationDriftCheckRequestFilters, limit *int, offset *int) int
		ModulePropagationExecutionRequest   func(childComplexity int, modulePropagationExecutionRequestID uint) int
		ModulePropagationExecutionRequests  func(childComplexity int, filters *models.ModulePropagationExecutionRequestFilters, limit *int, offset *int) int
		ModulePropagations                  func(childComplexity int, filters *models.ModulePropagationFilters, limit *int, offset *int) int
		ModuleVersion                       func(childComplexity int, moduleVersionID uint) int
		ModuleVersions                      func(childComplexity int, filters *models.ModuleVersionFilters, limit *int, offset *int) int
		OrgAccount                          func(childComplexity int, orgAccountID uint) int
		OrgAccounts                         func(childComplexity int, filters *models.OrgAccountFilters, limit *int, offset *int) int
		OrgDimension                        func(childComplexity int, orgDimensionID uint) int
		OrgDimensions                       func(childComplexity int, filters *models.OrgDimensionFilters, limit *int, offset *int) int
		OrgUnit                             func(childComplexity int, orgUnitID uint) int
		PlanExecutionRequest                func(childComplexity int, planExecutionRequestID uint) int
	}

	TerraformDriftCheckRequest struct {
		CompletedAt                          func(childComplexity int) int
		Destroy                              func(childComplexity int) int
		ID                                   func(childComplexity int) int
		ModuleAssignment                     func(childComplexity int) int
		ModuleAssignmentID                   func(childComplexity int) int
		ModulePropagation                    func(childComplexity int) int
		ModulePropagationDriftCheckRequest   func(childComplexity int) int
		ModulePropagationDriftCheckRequestID func(childComplexity int) int
		ModulePropagationID                  func(childComplexity int) int
		PlanExecutionRequest                 func(childComplexity int) int
		PlanExecutionRequestID               func(childComplexity int) int
		StartedAt                            func(childComplexity int) int
		Status                               func(childComplexity int) int
		SyncStatus                           func(childComplexity int) int
	}

	TerraformExecutionRequest struct {
		ApplyExecutionRequest               func(childComplexity int) int
		ApplyExecutionRequestID             func(childComplexity int) int
		CompletedAt                         func(childComplexity int) int
		Destroy                             func(childComplexity int) int
		ID                                  func(childComplexity int) int
		ModuleAssignment                    func(childComplexity int) int
		ModuleAssignmentID                  func(childComplexity int) int
		ModulePropagation                   func(childComplexity int) int
		ModulePropagationExecutionRequest   func(childComplexity int) int
		ModulePropagationExecutionRequestID func(childComplexity int) int
		ModulePropagationID                 func(childComplexity int) int
		PlanExecutionRequest                func(childComplexity int) int
		PlanExecutionRequestID              func(childComplexity int) int
		StartedAt                           func(childComplexity int) int
		Status                              func(childComplexity int) int
	}
}

type ApplyExecutionRequestResolver interface {
	ModuleAssignment(ctx context.Context, obj *models.ApplyExecutionRequest) (*models.ModuleAssignment, error)

	InitOutput(ctx context.Context, obj *models.ApplyExecutionRequest) (*string, error)
	ApplyOutput(ctx context.Context, obj *models.ApplyExecutionRequest) (*string, error)
}
type ModuleAssignmentResolver interface {
	ModuleVersion(ctx context.Context, obj *models.ModuleAssignment) (*models.ModuleVersion, error)

	ModuleGroup(ctx context.Context, obj *models.ModuleAssignment) (*models.ModuleGroup, error)

	OrgAccount(ctx context.Context, obj *models.ModuleAssignment) (*models.OrgAccount, error)

	ModulePropagation(ctx context.Context, obj *models.ModuleAssignment) (*models.ModulePropagation, error)
	TerraformDriftCheckRequests(ctx context.Context, obj *models.ModuleAssignment, filters *models.TerraformDriftCheckRequestFilters, limit *int, offset *int) ([]*models.TerraformDriftCheckRequest, error)
	TerraformExecutionRequests(ctx context.Context, obj *models.ModuleAssignment, filters *models.TerraformExecutionRequestFilters, limit *int, offset *int) ([]*models.TerraformExecutionRequest, error)
	TerraformConfiguration(ctx context.Context, obj *models.ModuleAssignment) (string, error)
}
type ModuleGroupResolver interface {
	Versions(ctx context.Context, obj *models.ModuleGroup, filters *models.ModuleVersionFilters, limit *int, offset *int) ([]*models.ModuleVersion, error)
	ModulePropagations(ctx context.Context, obj *models.ModuleGroup, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error)
	ModuleAssignments(ctx context.Context, obj *models.ModuleGroup, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error)
}
type ModulePropagationResolver interface {
	ModuleVersion(ctx context.Context, obj *models.ModulePropagation) (*models.ModuleVersion, error)

	ModuleGroup(ctx context.Context, obj *models.ModulePropagation) (*models.ModuleGroup, error)

	OrgUnit(ctx context.Context, obj *models.ModulePropagation) (*models.OrgUnit, error)

	OrgDimension(ctx context.Context, obj *models.ModulePropagation) (*models.OrgDimension, error)

	ModuleAssignments(ctx context.Context, obj *models.ModulePropagation, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error)
	ExecutionRequests(ctx context.Context, obj *models.ModulePropagation, filters *models.ModulePropagationExecutionRequestFilters, limit *int, offset *int) ([]*models.ModulePropagationExecutionRequest, error)
	DriftCheckRequests(ctx context.Context, obj *models.ModulePropagation, filters *models.ModulePropagationDriftCheckRequestFilters, limit *int, offset *int) ([]*models.ModulePropagationDriftCheckRequest, error)
}
type ModulePropagationDriftCheckRequestResolver interface {
	ModulePropagation(ctx context.Context, obj *models.ModulePropagationDriftCheckRequest) (*models.ModulePropagation, error)

	TerraformDriftCheckRequests(ctx context.Context, obj *models.ModulePropagationDriftCheckRequest, filters *models.TerraformDriftCheckRequestFilters, limit *int, offset *int) ([]*models.TerraformDriftCheckRequest, error)
}
type ModulePropagationExecutionRequestResolver interface {
	ModulePropagation(ctx context.Context, obj *models.ModulePropagationExecutionRequest) (*models.ModulePropagation, error)

	TerraformExecutionRequests(ctx context.Context, obj *models.ModulePropagationExecutionRequest, filters *models.TerraformExecutionRequestFilters, limit *int, offset *int) ([]*models.TerraformExecutionRequest, error)
}
type ModuleVersionResolver interface {
	ModuleGroup(ctx context.Context, obj *models.ModuleVersion) (*models.ModuleGroup, error)

	ModulePropagations(ctx context.Context, obj *models.ModuleVersion, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error)
	ModuleAssignments(ctx context.Context, obj *models.ModuleVersion, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error)
}
type MutationResolver interface {
	CreateModuleAssignment(ctx context.Context, moduleAssignment models.NewModuleAssignment) (*models.ModuleAssignment, error)
	UpdateModuleAssignment(ctx context.Context, moduleAssignmentID uint, moduleAssignmentUpdate models.ModuleAssignmentUpdate) (*models.ModuleAssignment, error)
	CreateModuleGroup(ctx context.Context, moduleGroup models.NewModuleGroup) (*models.ModuleGroup, error)
	DeleteModuleGroup(ctx context.Context, id uint) (bool, error)
	CreateModulePropagationDriftCheckRequest(ctx context.Context, modulePropagationDriftCheckRequest models.NewModulePropagationDriftCheckRequest) (*models.ModulePropagationDriftCheckRequest, error)
	CreateModulePropagationExecutionRequest(ctx context.Context, modulePropagationExecutionRequest models.NewModulePropagationExecutionRequest) (*models.ModulePropagationExecutionRequest, error)
	CreateModulePropagation(ctx context.Context, modulePropagation models.NewModulePropagation) (*models.ModulePropagation, error)
	DeleteModulePropagation(ctx context.Context, modulePropagationID uint) (bool, error)
	UpdateModulePropagation(ctx context.Context, modulePropagationID uint, update models.ModulePropagationUpdate) (*models.ModulePropagation, error)
	CreateModuleVersion(ctx context.Context, moduleVersion models.NewModuleVersion) (*models.ModuleVersion, error)
	DeleteModuleVersion(ctx context.Context, moduleVersionID uint) (bool, error)
	CreateOrgAccount(ctx context.Context, orgAccount models.NewOrgAccount) (*models.OrgAccount, error)
	DeleteOrgAccount(ctx context.Context, orgAccountID uint) (bool, error)
	UpdateOrgAccount(ctx context.Context, orgAccountID uint, orgAccount models.OrgAccountUpdate) (*models.OrgAccount, error)
	CreateOrgDimension(ctx context.Context, orgDimension models.NewOrgDimension) (*models.OrgDimension, error)
	DeleteOrgDimension(ctx context.Context, orgDimensionID uint) (bool, error)
	CreateOrgUnit(ctx context.Context, orgUnit models.NewOrgUnit) (*models.OrgUnit, error)
	DeleteOrgUnit(ctx context.Context, orgUnitID uint) (bool, error)
	UpdateOrgUnit(ctx context.Context, orgUnitID uint, update models.OrgUnitUpdate) (*models.OrgUnit, error)
	AddAccountToOrgUnit(ctx context.Context, orgUnitID uint, orgAccountID uint) (bool, error)
	RemoveAccountFromOrgUnit(ctx context.Context, orgUnitID uint, orgAccountID uint) (bool, error)
	CreateTerraformDriftCheckRequest(ctx context.Context, terraformDriftCheckRequest models.NewTerraformDriftCheckRequest) (*models.TerraformDriftCheckRequest, error)
	CreateTerraformExecutionRequest(ctx context.Context, terraformExecutionRequest models.NewTerraformExecutionRequest) (*models.TerraformExecutionRequest, error)
}
type OrgAccountResolver interface {
	OrgUnits(ctx context.Context, obj *models.OrgAccount, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error)

	ModuleAssignments(ctx context.Context, obj *models.OrgAccount, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error)
}
type OrgDimensionResolver interface {
	RootOrgUnit(ctx context.Context, obj *models.OrgDimension) (*models.OrgUnit, error)
	OrgUnits(ctx context.Context, obj *models.OrgDimension, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error)
	ModulePropagations(ctx context.Context, obj *models.OrgDimension, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error)
}
type OrgUnitResolver interface {
	OrgDimension(ctx context.Context, obj *models.OrgUnit) (*models.OrgDimension, error)

	ParentOrgUnit(ctx context.Context, obj *models.OrgUnit) (*models.OrgUnit, error)
	Children(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error)
	DownstreamOrgUnits(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error)
	UpstreamOrgUnits(ctx context.Context, obj *models.OrgUnit, filters *models.OrgUnitFilters, limit *int, offset *int) ([]*models.OrgUnit, error)
	OrgAccounts(ctx context.Context, obj *models.OrgUnit, filters *models.OrgAccountFilters, limit *int, offset *int) ([]*models.OrgAccount, error)
	ModulePropagations(ctx context.Context, obj *models.OrgUnit, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error)
}
type PlanExecutionRequestResolver interface {
	ModuleAssignment(ctx context.Context, obj *models.PlanExecutionRequest) (*models.ModuleAssignment, error)

	InitOutput(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error)
	PlanOutput(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error)
	PlanFile(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error)
	PlanJSON(ctx context.Context, obj *models.PlanExecutionRequest) (*string, error)
}
type QueryResolver interface {
	ApplyExecutionRequest(ctx context.Context, applyExecutionRequestID uint) (*models.ApplyExecutionRequest, error)
	ModuleAssignment(ctx context.Context, moduleAssignmentID uint) (*models.ModuleAssignment, error)
	ModuleAssignments(ctx context.Context, filters *models.ModuleAssignmentFilters, limit *int, offset *int) ([]*models.ModuleAssignment, error)
	ModuleGroup(ctx context.Context, id uint) (*models.ModuleGroup, error)
	ModuleGroups(ctx context.Context, filters *models.ModuleGroupFilters, limit *int, offset *int) ([]*models.ModuleGroup, error)
	ModulePropagationDriftCheckRequest(ctx context.Context, modulePropagationDriftCheckRequestID uint) (*models.ModulePropagationDriftCheckRequest, error)
	ModulePropagationDriftCheckRequests(ctx context.Context, filters *models.ModulePropagationDriftCheckRequestFilters, limit *int, offset *int) ([]*models.ModulePropagationDriftCheckRequest, error)
	ModulePropagationExecutionRequest(ctx context.Context, modulePropagationExecutionRequestID uint) (*models.ModulePropagationExecutionRequest, error)
	ModulePropagationExecutionRequests(ctx context.Context, filters *models.ModulePropagationExecutionRequestFilters, limit *int, offset *int) ([]*models.ModulePropagationExecutionRequest, error)
	ModulePropagation(ctx context.Context, modulePropagationID uint) (*models.ModulePropagation, error)
	ModulePropagations(ctx context.Context, filters *models.ModulePropagationFilters, limit *int, offset *int) ([]*models.ModulePropagation, error)
	ModuleVersion(ctx context.Context, moduleVersionID uint) (*models.ModuleVersion, error)
	ModuleVersions(ctx context.Context, filters *models.ModuleVersionFilters, limit *int, offset *int) ([]*models.ModuleVersion, error)
	OrgAccount(ctx context.Context, orgAccountID uint) (*models.OrgAccount, error)
	OrgAccounts(ctx context.Context, filters *models.OrgAccountFilters, limit *int, offset *int) ([]*models.OrgAccount, error)
	OrgDimension(ctx context.Context, orgDimensionID uint) (*models.OrgDimension, error)
	OrgDimensions(ctx context.Context, filters *models.OrgDimensionFilters, limit *int, offset *int) ([]*models.OrgDimension, error)
	OrgUnit(ctx context.Context, orgUnitID uint) (*models.OrgUnit, error)
	PlanExecutionRequest(ctx context.Context, planExecutionRequestID uint) (*models.PlanExecutionRequest, error)
}
type TerraformDriftCheckRequestResolver interface {
	ModuleAssignment(ctx context.Context, obj *models.TerraformDriftCheckRequest) (*models.ModuleAssignment, error)

	PlanExecutionRequest(ctx context.Context, obj *models.TerraformDriftCheckRequest) (*models.PlanExecutionRequest, error)

	ModulePropagation(ctx context.Context, obj *models.TerraformDriftCheckRequest) (*models.ModulePropagation, error)

	ModulePropagationDriftCheckRequest(ctx context.Context, obj *models.TerraformDriftCheckRequest) (*models.ModulePropagationDriftCheckRequest, error)
}
type TerraformExecutionRequestResolver interface {
	ModuleAssignment(ctx context.Context, obj *models.TerraformExecutionRequest) (*models.ModuleAssignment, error)

	PlanExecutionRequest(ctx context.Context, obj *models.TerraformExecutionRequest) (*models.PlanExecutionRequest, error)

	ApplyExecutionRequest(ctx context.Context, obj *models.TerraformExecutionRequest) (*models.ApplyExecutionRequest, error)

	ModulePropagation(ctx context.Context, obj *models.TerraformExecutionRequest) (*models.ModulePropagation, error)

	ModulePropagationExecutionRequest(ctx context.Context, obj *models.TerraformExecutionRequest) (*models.ModulePropagationExecutionRequest, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ApplyExecutionRequest.additionalArguments":
		if e.complexity.ApplyExecutionRequest.AdditionalArguments == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.AdditionalArguments(childComplexity), true

	case "ApplyExecutionRequest.applyOutput":
		if e.complexity.ApplyExecutionRequest.ApplyOutput == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.ApplyOutput(childComplexity), true

	case "ApplyExecutionRequest.completedAt":
		if e.complexity.ApplyExecutionRequest.CompletedAt == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.CompletedAt(childComplexity), true

	case "ApplyExecutionRequest.id":
		if e.complexity.ApplyExecutionRequest.ID == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.ID(childComplexity), true

	case "ApplyExecutionRequest.initOutput":
		if e.complexity.ApplyExecutionRequest.InitOutput == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.InitOutput(childComplexity), true

	case "ApplyExecutionRequest.moduleAssignment":
		if e.complexity.ApplyExecutionRequest.ModuleAssignment == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.ModuleAssignment(childComplexity), true

	case "ApplyExecutionRequest.moduleAssignmentID":
		if e.complexity.ApplyExecutionRequest.ModuleAssignmentID == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.ModuleAssignmentID(childComplexity), true

	case "ApplyExecutionRequest.startedAt":
		if e.complexity.ApplyExecutionRequest.StartedAt == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.StartedAt(childComplexity), true

	case "ApplyExecutionRequest.status":
		if e.complexity.ApplyExecutionRequest.Status == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.Status(childComplexity), true

	case "ApplyExecutionRequest.terraformConfigurationBase64":
		if e.complexity.ApplyExecutionRequest.TerraformConfigurationBase64 == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.TerraformConfigurationBase64(childComplexity), true

	case "ApplyExecutionRequest.terraformExecutionRequestID":
		if e.complexity.ApplyExecutionRequest.TerraformExecutionRequestID == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.TerraformExecutionRequestID(childComplexity), true

	case "ApplyExecutionRequest.terraformPlanBase64":
		if e.complexity.ApplyExecutionRequest.TerraformPlanBase64 == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.TerraformPlanBase64(childComplexity), true

	case "ApplyExecutionRequest.terraformVersion":
		if e.complexity.ApplyExecutionRequest.TerraformVersion == nil {
			break
		}

		return e.complexity.ApplyExecutionRequest.TerraformVersion(childComplexity), true

	case "Argument.name":
		if e.complexity.Argument.Name == nil {
			break
		}

		return e.complexity.Argument.Name(childComplexity), true

	case "Argument.value":
		if e.complexity.Argument.Value == nil {
			break
		}

		return e.complexity.Argument.Value(childComplexity), true

	case "AwsProviderConfiguration.alias":
		if e.complexity.AwsProviderConfiguration.Alias == nil {
			break
		}

		return e.complexity.AwsProviderConfiguration.Alias(childComplexity), true

	case "AwsProviderConfiguration.region":
		if e.complexity.AwsProviderConfiguration.Region == nil {
			break
		}

		return e.complexity.AwsProviderConfiguration.Region(childComplexity), true

	case "GcpProviderConfiguration.alias":
		if e.complexity.GcpProviderConfiguration.Alias == nil {
			break
		}

		return e.complexity.GcpProviderConfiguration.Alias(childComplexity), true

	case "GcpProviderConfiguration.region":
		if e.complexity.GcpProviderConfiguration.Region == nil {
			break
		}

		return e.complexity.GcpProviderConfiguration.Region(childComplexity), true

	case "Metadata.name":
		if e.complexity.Metadata.Name == nil {
			break
		}

		return e.complexity.Metadata.Name(childComplexity), true

	case "Metadata.value":
		if e.complexity.Metadata.Value == nil {
			break
		}

		return e.complexity.Metadata.Value(childComplexity), true

	case "ModuleAssignment.arguments":
		if e.complexity.ModuleAssignment.Arguments == nil {
			break
		}

		return e.complexity.ModuleAssignment.Arguments(childComplexity), true

	case "ModuleAssignment.awsProviderConfigurations":
		if e.complexity.ModuleAssignment.AwsProviderConfigurations == nil {
			break
		}

		return e.complexity.ModuleAssignment.AwsProviderConfigurations(childComplexity), true

	case "ModuleAssignment.description":
		if e.complexity.ModuleAssignment.Description == nil {
			break
		}

		return e.complexity.ModuleAssignment.Description(childComplexity), true

	case "ModuleAssignment.gcpProviderConfigurations":
		if e.complexity.ModuleAssignment.GcpProviderConfigurations == nil {
			break
		}

		return e.complexity.ModuleAssignment.GcpProviderConfigurations(childComplexity), true

	case "ModuleAssignment.id":
		if e.complexity.ModuleAssignment.ID == nil {
			break
		}

		return e.complexity.ModuleAssignment.ID(childComplexity), true

	case "ModuleAssignment.moduleGroup":
		if e.complexity.ModuleAssignment.ModuleGroup == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModuleGroup(childComplexity), true

	case "ModuleAssignment.moduleGroupID":
		if e.complexity.ModuleAssignment.ModuleGroupID == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModuleGroupID(childComplexity), true

	case "ModuleAssignment.modulePropagation":
		if e.complexity.ModuleAssignment.ModulePropagation == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModulePropagation(childComplexity), true

	case "ModuleAssignment.modulePropagationID":
		if e.complexity.ModuleAssignment.ModulePropagationID == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModulePropagationID(childComplexity), true

	case "ModuleAssignment.moduleVersion":
		if e.complexity.ModuleAssignment.ModuleVersion == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModuleVersion(childComplexity), true

	case "ModuleAssignment.moduleVersionID":
		if e.complexity.ModuleAssignment.ModuleVersionID == nil {
			break
		}

		return e.complexity.ModuleAssignment.ModuleVersionID(childComplexity), true

	case "ModuleAssignment.name":
		if e.complexity.ModuleAssignment.Name == nil {
			break
		}

		return e.complexity.ModuleAssignment.Name(childComplexity), true

	case "ModuleAssignment.orgAccount":
		if e.complexity.ModuleAssignment.OrgAccount == nil {
			break
		}

		return e.complexity.ModuleAssignment.OrgAccount(childComplexity), true

	case "ModuleAssignment.orgAccountID":
		if e.complexity.ModuleAssignment.OrgAccountID == nil {
			break
		}

		return e.complexity.ModuleAssignment.OrgAccountID(childComplexity), true

	case "ModuleAssignment.remoteStateBucket":
		if e.complexity.ModuleAssignment.RemoteStateBucket == nil {
			break
		}

		return e.complexity.ModuleAssignment.RemoteStateBucket(childComplexity), true

	case "ModuleAssignment.remoteStateKey":
		if e.complexity.ModuleAssignment.RemoteStateKey == nil {
			break
		}

		return e.complexity.ModuleAssignment.RemoteStateKey(childComplexity), true

	case "ModuleAssignment.remoteStateRegion":
		if e.complexity.ModuleAssignment.RemoteStateRegion == nil {
			break
		}

		return e.complexity.ModuleAssignment.RemoteStateRegion(childComplexity), true

	case "ModuleAssignment.status":
		if e.complexity.ModuleAssignment.Status == nil {
			break
		}

		return e.complexity.ModuleAssignment.Status(childComplexity), true

	case "ModuleAssignment.terraformConfiguration":
		if e.complexity.ModuleAssignment.TerraformConfiguration == nil {
			break
		}

		return e.complexity.ModuleAssignment.TerraformConfiguration(childComplexity), true

	case "ModuleAssignment.terraformDriftCheckRequests":
		if e.complexity.ModuleAssignment.TerraformDriftCheckRequests == nil {
			break
		}

		args, err := ec.field_ModuleAssignment_terraformDriftCheckRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleAssignment.TerraformDriftCheckRequests(childComplexity, args["filters"].(*models.TerraformDriftCheckRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleAssignment.terraformExecutionRequests":
		if e.complexity.ModuleAssignment.TerraformExecutionRequests == nil {
			break
		}

		args, err := ec.field_ModuleAssignment_terraformExecutionRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleAssignment.TerraformExecutionRequests(childComplexity, args["filters"].(*models.TerraformExecutionRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleGroup.cloudPlatform":
		if e.complexity.ModuleGroup.CloudPlatform == nil {
			break
		}

		return e.complexity.ModuleGroup.CloudPlatform(childComplexity), true

	case "ModuleGroup.id":
		if e.complexity.ModuleGroup.ID == nil {
			break
		}

		return e.complexity.ModuleGroup.ID(childComplexity), true

	case "ModuleGroup.moduleAssignments":
		if e.complexity.ModuleGroup.ModuleAssignments == nil {
			break
		}

		args, err := ec.field_ModuleGroup_moduleAssignments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleGroup.ModuleAssignments(childComplexity, args["filters"].(*models.ModuleAssignmentFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleGroup.modulePropagations":
		if e.complexity.ModuleGroup.ModulePropagations == nil {
			break
		}

		args, err := ec.field_ModuleGroup_modulePropagations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleGroup.ModulePropagations(childComplexity, args["filters"].(*models.ModulePropagationFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleGroup.name":
		if e.complexity.ModuleGroup.Name == nil {
			break
		}

		return e.complexity.ModuleGroup.Name(childComplexity), true

	case "ModuleGroup.versions":
		if e.complexity.ModuleGroup.Versions == nil {
			break
		}

		args, err := ec.field_ModuleGroup_versions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleGroup.Versions(childComplexity, args["filters"].(*models.ModuleVersionFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModulePropagation.arguments":
		if e.complexity.ModulePropagation.Arguments == nil {
			break
		}

		return e.complexity.ModulePropagation.Arguments(childComplexity), true

	case "ModulePropagation.awsProviderConfigurations":
		if e.complexity.ModulePropagation.AwsProviderConfigurations == nil {
			break
		}

		return e.complexity.ModulePropagation.AwsProviderConfigurations(childComplexity), true

	case "ModulePropagation.description":
		if e.complexity.ModulePropagation.Description == nil {
			break
		}

		return e.complexity.ModulePropagation.Description(childComplexity), true

	case "ModulePropagation.driftCheckRequests":
		if e.complexity.ModulePropagation.DriftCheckRequests == nil {
			break
		}

		args, err := ec.field_ModulePropagation_driftCheckRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModulePropagation.DriftCheckRequests(childComplexity, args["filters"].(*models.ModulePropagationDriftCheckRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModulePropagation.executionRequests":
		if e.complexity.ModulePropagation.ExecutionRequests == nil {
			break
		}

		args, err := ec.field_ModulePropagation_executionRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModulePropagation.ExecutionRequests(childComplexity, args["filters"].(*models.ModulePropagationExecutionRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModulePropagation.gcpProviderConfigurations":
		if e.complexity.ModulePropagation.GcpProviderConfigurations == nil {
			break
		}

		return e.complexity.ModulePropagation.GcpProviderConfigurations(childComplexity), true

	case "ModulePropagation.id":
		if e.complexity.ModulePropagation.ID == nil {
			break
		}

		return e.complexity.ModulePropagation.ID(childComplexity), true

	case "ModulePropagation.moduleAssignments":
		if e.complexity.ModulePropagation.ModuleAssignments == nil {
			break
		}

		args, err := ec.field_ModulePropagation_moduleAssignments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModulePropagation.ModuleAssignments(childComplexity, args["filters"].(*models.ModuleAssignmentFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModulePropagation.moduleGroup":
		if e.complexity.ModulePropagation.ModuleGroup == nil {
			break
		}

		return e.complexity.ModulePropagation.ModuleGroup(childComplexity), true

	case "ModulePropagation.moduleGroupID":
		if e.complexity.ModulePropagation.ModuleGroupID == nil {
			break
		}

		return e.complexity.ModulePropagation.ModuleGroupID(childComplexity), true

	case "ModulePropagation.moduleVersion":
		if e.complexity.ModulePropagation.ModuleVersion == nil {
			break
		}

		return e.complexity.ModulePropagation.ModuleVersion(childComplexity), true

	case "ModulePropagation.moduleVersionID":
		if e.complexity.ModulePropagation.ModuleVersionID == nil {
			break
		}

		return e.complexity.ModulePropagation.ModuleVersionID(childComplexity), true

	case "ModulePropagation.name":
		if e.complexity.ModulePropagation.Name == nil {
			break
		}

		return e.complexity.ModulePropagation.Name(childComplexity), true

	case "ModulePropagation.orgDimension":
		if e.complexity.ModulePropagation.OrgDimension == nil {
			break
		}

		return e.complexity.ModulePropagation.OrgDimension(childComplexity), true

	case "ModulePropagation.orgDimensionID":
		if e.complexity.ModulePropagation.OrgDimensionID == nil {
			break
		}

		return e.complexity.ModulePropagation.OrgDimensionID(childComplexity), true

	case "ModulePropagation.orgUnit":
		if e.complexity.ModulePropagation.OrgUnit == nil {
			break
		}

		return e.complexity.ModulePropagation.OrgUnit(childComplexity), true

	case "ModulePropagation.orgUnitID":
		if e.complexity.ModulePropagation.OrgUnitID == nil {
			break
		}

		return e.complexity.ModulePropagation.OrgUnitID(childComplexity), true

	case "ModulePropagationDriftCheckRequest.completedAt":
		if e.complexity.ModulePropagationDriftCheckRequest.CompletedAt == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.CompletedAt(childComplexity), true

	case "ModulePropagationDriftCheckRequest.id":
		if e.complexity.ModulePropagationDriftCheckRequest.ID == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.ID(childComplexity), true

	case "ModulePropagationDriftCheckRequest.modulePropagation":
		if e.complexity.ModulePropagationDriftCheckRequest.ModulePropagation == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.ModulePropagation(childComplexity), true

	case "ModulePropagationDriftCheckRequest.modulePropagationID":
		if e.complexity.ModulePropagationDriftCheckRequest.ModulePropagationID == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.ModulePropagationID(childComplexity), true

	case "ModulePropagationDriftCheckRequest.startedAt":
		if e.complexity.ModulePropagationDriftCheckRequest.StartedAt == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.StartedAt(childComplexity), true

	case "ModulePropagationDriftCheckRequest.status":
		if e.complexity.ModulePropagationDriftCheckRequest.Status == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.Status(childComplexity), true

	case "ModulePropagationDriftCheckRequest.syncStatus":
		if e.complexity.ModulePropagationDriftCheckRequest.SyncStatus == nil {
			break
		}

		return e.complexity.ModulePropagationDriftCheckRequest.SyncStatus(childComplexity), true

	case "ModulePropagationDriftCheckRequest.terraformDriftCheckRequests":
		if e.complexity.ModulePropagationDriftCheckRequest.TerraformDriftCheckRequests == nil {
			break
		}

		args, err := ec.field_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModulePropagationDriftCheckRequest.TerraformDriftCheckRequests(childComplexity, args["filters"].(*models.TerraformDriftCheckRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModulePropagationExecutionRequest.completedAt":
		if e.complexity.ModulePropagationExecutionRequest.CompletedAt == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.CompletedAt(childComplexity), true

	case "ModulePropagationExecutionRequest.id":
		if e.complexity.ModulePropagationExecutionRequest.ID == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.ID(childComplexity), true

	case "ModulePropagationExecutionRequest.modulePropagation":
		if e.complexity.ModulePropagationExecutionRequest.ModulePropagation == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.ModulePropagation(childComplexity), true

	case "ModulePropagationExecutionRequest.modulePropagationID":
		if e.complexity.ModulePropagationExecutionRequest.ModulePropagationID == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.ModulePropagationID(childComplexity), true

	case "ModulePropagationExecutionRequest.startedAt":
		if e.complexity.ModulePropagationExecutionRequest.StartedAt == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.StartedAt(childComplexity), true

	case "ModulePropagationExecutionRequest.status":
		if e.complexity.ModulePropagationExecutionRequest.Status == nil {
			break
		}

		return e.complexity.ModulePropagationExecutionRequest.Status(childComplexity), true

	case "ModulePropagationExecutionRequest.terraformExecutionRequests":
		if e.complexity.ModulePropagationExecutionRequest.TerraformExecutionRequests == nil {
			break
		}

		args, err := ec.field_ModulePropagationExecutionRequest_terraformExecutionRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModulePropagationExecutionRequest.TerraformExecutionRequests(childComplexity, args["filters"].(*models.TerraformExecutionRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleVariable.default":
		if e.complexity.ModuleVariable.Default == nil {
			break
		}

		return e.complexity.ModuleVariable.Default(childComplexity), true

	case "ModuleVariable.description":
		if e.complexity.ModuleVariable.Description == nil {
			break
		}

		return e.complexity.ModuleVariable.Description(childComplexity), true

	case "ModuleVariable.name":
		if e.complexity.ModuleVariable.Name == nil {
			break
		}

		return e.complexity.ModuleVariable.Name(childComplexity), true

	case "ModuleVariable.type":
		if e.complexity.ModuleVariable.Type == nil {
			break
		}

		return e.complexity.ModuleVariable.Type(childComplexity), true

	case "ModuleVersion.id":
		if e.complexity.ModuleVersion.ID == nil {
			break
		}

		return e.complexity.ModuleVersion.ID(childComplexity), true

	case "ModuleVersion.moduleAssignments":
		if e.complexity.ModuleVersion.ModuleAssignments == nil {
			break
		}

		args, err := ec.field_ModuleVersion_moduleAssignments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleVersion.ModuleAssignments(childComplexity, args["filters"].(*models.ModuleAssignmentFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleVersion.moduleGroup":
		if e.complexity.ModuleVersion.ModuleGroup == nil {
			break
		}

		return e.complexity.ModuleVersion.ModuleGroup(childComplexity), true

	case "ModuleVersion.moduleGroupID":
		if e.complexity.ModuleVersion.ModuleGroupID == nil {
			break
		}

		return e.complexity.ModuleVersion.ModuleGroupID(childComplexity), true

	case "ModuleVersion.modulePropagations":
		if e.complexity.ModuleVersion.ModulePropagations == nil {
			break
		}

		args, err := ec.field_ModuleVersion_modulePropagations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModuleVersion.ModulePropagations(childComplexity, args["filters"].(*models.ModulePropagationFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "ModuleVersion.name":
		if e.complexity.ModuleVersion.Name == nil {
			break
		}

		return e.complexity.ModuleVersion.Name(childComplexity), true

	case "ModuleVersion.remoteSource":
		if e.complexity.ModuleVersion.RemoteSource == nil {
			break
		}

		return e.complexity.ModuleVersion.RemoteSource(childComplexity), true

	case "ModuleVersion.terraformVersion":
		if e.complexity.ModuleVersion.TerraformVersion == nil {
			break
		}

		return e.complexity.ModuleVersion.TerraformVersion(childComplexity), true

	case "ModuleVersion.variables":
		if e.complexity.ModuleVersion.Variables == nil {
			break
		}

		return e.complexity.ModuleVersion.Variables(childComplexity), true

	case "Mutation.addAccountToOrgUnit":
		if e.complexity.Mutation.AddAccountToOrgUnit == nil {
			break
		}

		args, err := ec.field_Mutation_addAccountToOrgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAccountToOrgUnit(childComplexity, args["orgUnitID"].(uint), args["orgAccountID"].(uint)), true

	case "Mutation.createModuleAssignment":
		if e.complexity.Mutation.CreateModuleAssignment == nil {
			break
		}

		args, err := ec.field_Mutation_createModuleAssignment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModuleAssignment(childComplexity, args["moduleAssignment"].(models.NewModuleAssignment)), true

	case "Mutation.createModuleGroup":
		if e.complexity.Mutation.CreateModuleGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createModuleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModuleGroup(childComplexity, args["moduleGroup"].(models.NewModuleGroup)), true

	case "Mutation.createModulePropagation":
		if e.complexity.Mutation.CreateModulePropagation == nil {
			break
		}

		args, err := ec.field_Mutation_createModulePropagation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModulePropagation(childComplexity, args["modulePropagation"].(models.NewModulePropagation)), true

	case "Mutation.createModulePropagationDriftCheckRequest":
		if e.complexity.Mutation.CreateModulePropagationDriftCheckRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createModulePropagationDriftCheckRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModulePropagationDriftCheckRequest(childComplexity, args["modulePropagationDriftCheckRequest"].(models.NewModulePropagationDriftCheckRequest)), true

	case "Mutation.createModulePropagationExecutionRequest":
		if e.complexity.Mutation.CreateModulePropagationExecutionRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createModulePropagationExecutionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModulePropagationExecutionRequest(childComplexity, args["modulePropagationExecutionRequest"].(models.NewModulePropagationExecutionRequest)), true

	case "Mutation.createModuleVersion":
		if e.complexity.Mutation.CreateModuleVersion == nil {
			break
		}

		args, err := ec.field_Mutation_createModuleVersion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModuleVersion(childComplexity, args["moduleVersion"].(models.NewModuleVersion)), true

	case "Mutation.createOrgAccount":
		if e.complexity.Mutation.CreateOrgAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createOrgAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrgAccount(childComplexity, args["orgAccount"].(models.NewOrgAccount)), true

	case "Mutation.createOrgDimension":
		if e.complexity.Mutation.CreateOrgDimension == nil {
			break
		}

		args, err := ec.field_Mutation_createOrgDimension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrgDimension(childComplexity, args["orgDimension"].(models.NewOrgDimension)), true

	case "Mutation.createOrgUnit":
		if e.complexity.Mutation.CreateOrgUnit == nil {
			break
		}

		args, err := ec.field_Mutation_createOrgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrgUnit(childComplexity, args["orgUnit"].(models.NewOrgUnit)), true

	case "Mutation.createTerraformDriftCheckRequest":
		if e.complexity.Mutation.CreateTerraformDriftCheckRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createTerraformDriftCheckRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTerraformDriftCheckRequest(childComplexity, args["terraformDriftCheckRequest"].(models.NewTerraformDriftCheckRequest)), true

	case "Mutation.createTerraformExecutionRequest":
		if e.complexity.Mutation.CreateTerraformExecutionRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createTerraformExecutionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTerraformExecutionRequest(childComplexity, args["terraformExecutionRequest"].(models.NewTerraformExecutionRequest)), true

	case "Mutation.deleteModuleGroup":
		if e.complexity.Mutation.DeleteModuleGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteModuleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteModuleGroup(childComplexity, args["id"].(uint)), true

	case "Mutation.deleteModulePropagation":
		if e.complexity.Mutation.DeleteModulePropagation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteModulePropagation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteModulePropagation(childComplexity, args["modulePropagationID"].(uint)), true

	case "Mutation.deleteModuleVersion":
		if e.complexity.Mutation.DeleteModuleVersion == nil {
			break
		}

		args, err := ec.field_Mutation_deleteModuleVersion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteModuleVersion(childComplexity, args["moduleVersionId"].(uint)), true

	case "Mutation.deleteOrgAccount":
		if e.complexity.Mutation.DeleteOrgAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrgAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrgAccount(childComplexity, args["orgAccountID"].(uint)), true

	case "Mutation.deleteOrgDimension":
		if e.complexity.Mutation.DeleteOrgDimension == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrgDimension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrgDimension(childComplexity, args["orgDimensionID"].(uint)), true

	case "Mutation.deleteOrgUnit":
		if e.complexity.Mutation.DeleteOrgUnit == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrgUnit(childComplexity, args["orgUnitID"].(uint)), true

	case "Mutation.removeAccountFromOrgUnit":
		if e.complexity.Mutation.RemoveAccountFromOrgUnit == nil {
			break
		}

		args, err := ec.field_Mutation_removeAccountFromOrgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveAccountFromOrgUnit(childComplexity, args["orgUnitID"].(uint), args["orgAccountID"].(uint)), true

	case "Mutation.updateModuleAssignment":
		if e.complexity.Mutation.UpdateModuleAssignment == nil {
			break
		}

		args, err := ec.field_Mutation_updateModuleAssignment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateModuleAssignment(childComplexity, args["moduleAssignmentID"].(uint), args["moduleAssignmentUpdate"].(models.ModuleAssignmentUpdate)), true

	case "Mutation.updateModulePropagation":
		if e.complexity.Mutation.UpdateModulePropagation == nil {
			break
		}

		args, err := ec.field_Mutation_updateModulePropagation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateModulePropagation(childComplexity, args["modulePropagationID"].(uint), args["update"].(models.ModulePropagationUpdate)), true

	case "Mutation.updateOrgAccount":
		if e.complexity.Mutation.UpdateOrgAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgAccount(childComplexity, args["orgAccountID"].(uint), args["orgAccount"].(models.OrgAccountUpdate)), true

	case "Mutation.updateOrgUnit":
		if e.complexity.Mutation.UpdateOrgUnit == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrgUnit(childComplexity, args["orgUnitID"].(uint), args["update"].(models.OrgUnitUpdate)), true

	case "OrgAccount.assumeRoleName":
		if e.complexity.OrgAccount.AssumeRoleName == nil {
			break
		}

		return e.complexity.OrgAccount.AssumeRoleName(childComplexity), true

	case "OrgAccount.cloudIdentifier":
		if e.complexity.OrgAccount.CloudIdentifier == nil {
			break
		}

		return e.complexity.OrgAccount.CloudIdentifier(childComplexity), true

	case "OrgAccount.cloudPlatform":
		if e.complexity.OrgAccount.CloudPlatform == nil {
			break
		}

		return e.complexity.OrgAccount.CloudPlatform(childComplexity), true

	case "OrgAccount.id":
		if e.complexity.OrgAccount.ID == nil {
			break
		}

		return e.complexity.OrgAccount.ID(childComplexity), true

	case "OrgAccount.metadata":
		if e.complexity.OrgAccount.Metadata == nil {
			break
		}

		return e.complexity.OrgAccount.Metadata(childComplexity), true

	case "OrgAccount.moduleAssignments":
		if e.complexity.OrgAccount.ModuleAssignments == nil {
			break
		}

		args, err := ec.field_OrgAccount_moduleAssignments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgAccount.ModuleAssignments(childComplexity, args["filters"].(*models.ModuleAssignmentFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgAccount.name":
		if e.complexity.OrgAccount.Name == nil {
			break
		}

		return e.complexity.OrgAccount.Name(childComplexity), true

	case "OrgAccount.orgUnits":
		if e.complexity.OrgAccount.OrgUnits == nil {
			break
		}

		args, err := ec.field_OrgAccount_orgUnits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgAccount.OrgUnits(childComplexity, args["filters"].(*models.OrgUnitFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgDimension.id":
		if e.complexity.OrgDimension.ID == nil {
			break
		}

		return e.complexity.OrgDimension.ID(childComplexity), true

	case "OrgDimension.modulePropagations":
		if e.complexity.OrgDimension.ModulePropagations == nil {
			break
		}

		args, err := ec.field_OrgDimension_modulePropagations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgDimension.ModulePropagations(childComplexity, args["filters"].(*models.ModulePropagationFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgDimension.name":
		if e.complexity.OrgDimension.Name == nil {
			break
		}

		return e.complexity.OrgDimension.Name(childComplexity), true

	case "OrgDimension.orgUnits":
		if e.complexity.OrgDimension.OrgUnits == nil {
			break
		}

		args, err := ec.field_OrgDimension_orgUnits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgDimension.OrgUnits(childComplexity, args["filters"].(*models.OrgUnitFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgDimension.rootOrgUnit":
		if e.complexity.OrgDimension.RootOrgUnit == nil {
			break
		}

		return e.complexity.OrgDimension.RootOrgUnit(childComplexity), true

	case "OrgUnit.children":
		if e.complexity.OrgUnit.Children == nil {
			break
		}

		args, err := ec.field_OrgUnit_children_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgUnit.Children(childComplexity, args["filters"].(*models.OrgUnitFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgUnit.downstreamOrgUnits":
		if e.complexity.OrgUnit.DownstreamOrgUnits == nil {
			break
		}

		args, err := ec.field_OrgUnit_downstreamOrgUnits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgUnit.DownstreamOrgUnits(childComplexity, args["filters"].(*models.OrgUnitFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgUnit.hierarchy":
		if e.complexity.OrgUnit.Hierarchy == nil {
			break
		}

		return e.complexity.OrgUnit.Hierarchy(childComplexity), true

	case "OrgUnit.id":
		if e.complexity.OrgUnit.ID == nil {
			break
		}

		return e.complexity.OrgUnit.ID(childComplexity), true

	case "OrgUnit.modulePropagations":
		if e.complexity.OrgUnit.ModulePropagations == nil {
			break
		}

		args, err := ec.field_OrgUnit_modulePropagations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgUnit.ModulePropagations(childComplexity, args["filters"].(*models.ModulePropagationFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgUnit.name":
		if e.complexity.OrgUnit.Name == nil {
			break
		}

		return e.complexity.OrgUnit.Name(childComplexity), true

	case "OrgUnit.orgAccounts":
		if e.complexity.OrgUnit.OrgAccounts == nil {
			break
		}

		args, err := ec.field_OrgUnit_orgAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgUnit.OrgAccounts(childComplexity, args["filters"].(*models.OrgAccountFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "OrgUnit.orgDimension":
		if e.complexity.OrgUnit.OrgDimension == nil {
			break
		}

		return e.complexity.OrgUnit.OrgDimension(childComplexity), true

	case "OrgUnit.orgDimensionID":
		if e.complexity.OrgUnit.OrgDimensionID == nil {
			break
		}

		return e.complexity.OrgUnit.OrgDimensionID(childComplexity), true

	case "OrgUnit.parentOrgUnit":
		if e.complexity.OrgUnit.ParentOrgUnit == nil {
			break
		}

		return e.complexity.OrgUnit.ParentOrgUnit(childComplexity), true

	case "OrgUnit.parentOrgUnitID":
		if e.complexity.OrgUnit.ParentOrgUnitID == nil {
			break
		}

		return e.complexity.OrgUnit.ParentOrgUnitID(childComplexity), true

	case "OrgUnit.upstreamOrgUnits":
		if e.complexity.OrgUnit.UpstreamOrgUnits == nil {
			break
		}

		args, err := ec.field_OrgUnit_upstreamOrgUnits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OrgUnit.UpstreamOrgUnits(childComplexity, args["filters"].(*models.OrgUnitFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "PlanExecutionRequest.additionalArguments":
		if e.complexity.PlanExecutionRequest.AdditionalArguments == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.AdditionalArguments(childComplexity), true

	case "PlanExecutionRequest.completedAt":
		if e.complexity.PlanExecutionRequest.CompletedAt == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.CompletedAt(childComplexity), true

	case "PlanExecutionRequest.id":
		if e.complexity.PlanExecutionRequest.ID == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.ID(childComplexity), true

	case "PlanExecutionRequest.initOutput":
		if e.complexity.PlanExecutionRequest.InitOutput == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.InitOutput(childComplexity), true

	case "PlanExecutionRequest.moduleAssignment":
		if e.complexity.PlanExecutionRequest.ModuleAssignment == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.ModuleAssignment(childComplexity), true

	case "PlanExecutionRequest.moduleAssignmentID":
		if e.complexity.PlanExecutionRequest.ModuleAssignmentID == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.ModuleAssignmentID(childComplexity), true

	case "PlanExecutionRequest.planFile":
		if e.complexity.PlanExecutionRequest.PlanFile == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.PlanFile(childComplexity), true

	case "PlanExecutionRequest.planJSON":
		if e.complexity.PlanExecutionRequest.PlanJSON == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.PlanJSON(childComplexity), true

	case "PlanExecutionRequest.planOutput":
		if e.complexity.PlanExecutionRequest.PlanOutput == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.PlanOutput(childComplexity), true

	case "PlanExecutionRequest.startedAt":
		if e.complexity.PlanExecutionRequest.StartedAt == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.StartedAt(childComplexity), true

	case "PlanExecutionRequest.status":
		if e.complexity.PlanExecutionRequest.Status == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.Status(childComplexity), true

	case "PlanExecutionRequest.terraformConfigurationBase64":
		if e.complexity.PlanExecutionRequest.TerraformConfigurationBase64 == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.TerraformConfigurationBase64(childComplexity), true

	case "PlanExecutionRequest.terraformDriftCheckRequestID":
		if e.complexity.PlanExecutionRequest.TerraformDriftCheckRequestID == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.TerraformDriftCheckRequestID(childComplexity), true

	case "PlanExecutionRequest.terraformExecutionRequestID":
		if e.complexity.PlanExecutionRequest.TerraformExecutionRequestID == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.TerraformExecutionRequestID(childComplexity), true

	case "PlanExecutionRequest.terraformVersion":
		if e.complexity.PlanExecutionRequest.TerraformVersion == nil {
			break
		}

		return e.complexity.PlanExecutionRequest.TerraformVersion(childComplexity), true

	case "Query.applyExecutionRequest":
		if e.complexity.Query.ApplyExecutionRequest == nil {
			break
		}

		args, err := ec.field_Query_applyExecutionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ApplyExecutionRequest(childComplexity, args["applyExecutionRequestID"].(uint)), true

	case "Query.moduleAssignment":
		if e.complexity.Query.ModuleAssignment == nil {
			break
		}

		args, err := ec.field_Query_moduleAssignment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleAssignment(childComplexity, args["moduleAssignmentID"].(uint)), true

	case "Query.moduleAssignments":
		if e.complexity.Query.ModuleAssignments == nil {
			break
		}

		args, err := ec.field_Query_moduleAssignments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleAssignments(childComplexity, args["filters"].(*models.ModuleAssignmentFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.moduleGroup":
		if e.complexity.Query.ModuleGroup == nil {
			break
		}

		args, err := ec.field_Query_moduleGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleGroup(childComplexity, args["id"].(uint)), true

	case "Query.moduleGroups":
		if e.complexity.Query.ModuleGroups == nil {
			break
		}

		args, err := ec.field_Query_moduleGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleGroups(childComplexity, args["filters"].(*models.ModuleGroupFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.modulePropagation":
		if e.complexity.Query.ModulePropagation == nil {
			break
		}

		args, err := ec.field_Query_modulePropagation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagation(childComplexity, args["modulePropagationID"].(uint)), true

	case "Query.modulePropagationDriftCheckRequest":
		if e.complexity.Query.ModulePropagationDriftCheckRequest == nil {
			break
		}

		args, err := ec.field_Query_modulePropagationDriftCheckRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagationDriftCheckRequest(childComplexity, args["modulePropagationDriftCheckRequestID"].(uint)), true

	case "Query.modulePropagationDriftCheckRequests":
		if e.complexity.Query.ModulePropagationDriftCheckRequests == nil {
			break
		}

		args, err := ec.field_Query_modulePropagationDriftCheckRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagationDriftCheckRequests(childComplexity, args["filters"].(*models.ModulePropagationDriftCheckRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.modulePropagationExecutionRequest":
		if e.complexity.Query.ModulePropagationExecutionRequest == nil {
			break
		}

		args, err := ec.field_Query_modulePropagationExecutionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagationExecutionRequest(childComplexity, args["modulePropagationExecutionRequestId"].(uint)), true

	case "Query.modulePropagationExecutionRequests":
		if e.complexity.Query.ModulePropagationExecutionRequests == nil {
			break
		}

		args, err := ec.field_Query_modulePropagationExecutionRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagationExecutionRequests(childComplexity, args["filters"].(*models.ModulePropagationExecutionRequestFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.modulePropagations":
		if e.complexity.Query.ModulePropagations == nil {
			break
		}

		args, err := ec.field_Query_modulePropagations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModulePropagations(childComplexity, args["filters"].(*models.ModulePropagationFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.moduleVersion":
		if e.complexity.Query.ModuleVersion == nil {
			break
		}

		args, err := ec.field_Query_moduleVersion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleVersion(childComplexity, args["moduleVersionId"].(uint)), true

	case "Query.moduleVersions":
		if e.complexity.Query.ModuleVersions == nil {
			break
		}

		args, err := ec.field_Query_moduleVersions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModuleVersions(childComplexity, args["filters"].(*models.ModuleVersionFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.orgAccount":
		if e.complexity.Query.OrgAccount == nil {
			break
		}

		args, err := ec.field_Query_orgAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgAccount(childComplexity, args["orgAccountID"].(uint)), true

	case "Query.orgAccounts":
		if e.complexity.Query.OrgAccounts == nil {
			break
		}

		args, err := ec.field_Query_orgAccounts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgAccounts(childComplexity, args["filters"].(*models.OrgAccountFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.orgDimension":
		if e.complexity.Query.OrgDimension == nil {
			break
		}

		args, err := ec.field_Query_orgDimension_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgDimension(childComplexity, args["orgDimensionID"].(uint)), true

	case "Query.orgDimensions":
		if e.complexity.Query.OrgDimensions == nil {
			break
		}

		args, err := ec.field_Query_orgDimensions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgDimensions(childComplexity, args["filters"].(*models.OrgDimensionFilters), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.orgUnit":
		if e.complexity.Query.OrgUnit == nil {
			break
		}

		args, err := ec.field_Query_orgUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrgUnit(childComplexity, args["orgUnitID"].(uint)), true

	case "Query.planExecutionRequest":
		if e.complexity.Query.PlanExecutionRequest == nil {
			break
		}

		args, err := ec.field_Query_planExecutionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanExecutionRequest(childComplexity, args["planExecutionRequestID"].(uint)), true

	case "TerraformDriftCheckRequest.completedAt":
		if e.complexity.TerraformDriftCheckRequest.CompletedAt == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.CompletedAt(childComplexity), true

	case "TerraformDriftCheckRequest.destroy":
		if e.complexity.TerraformDriftCheckRequest.Destroy == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.Destroy(childComplexity), true

	case "TerraformDriftCheckRequest.id":
		if e.complexity.TerraformDriftCheckRequest.ID == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ID(childComplexity), true

	case "TerraformDriftCheckRequest.moduleAssignment":
		if e.complexity.TerraformDriftCheckRequest.ModuleAssignment == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModuleAssignment(childComplexity), true

	case "TerraformDriftCheckRequest.moduleAssignmentID":
		if e.complexity.TerraformDriftCheckRequest.ModuleAssignmentID == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModuleAssignmentID(childComplexity), true

	case "TerraformDriftCheckRequest.modulePropagation":
		if e.complexity.TerraformDriftCheckRequest.ModulePropagation == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModulePropagation(childComplexity), true

	case "TerraformDriftCheckRequest.modulePropagationDriftCheckRequest":
		if e.complexity.TerraformDriftCheckRequest.ModulePropagationDriftCheckRequest == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModulePropagationDriftCheckRequest(childComplexity), true

	case "TerraformDriftCheckRequest.modulePropagationDriftCheckRequestID":
		if e.complexity.TerraformDriftCheckRequest.ModulePropagationDriftCheckRequestID == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModulePropagationDriftCheckRequestID(childComplexity), true

	case "TerraformDriftCheckRequest.modulePropagationID":
		if e.complexity.TerraformDriftCheckRequest.ModulePropagationID == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.ModulePropagationID(childComplexity), true

	case "TerraformDriftCheckRequest.planExecutionRequest":
		if e.complexity.TerraformDriftCheckRequest.PlanExecutionRequest == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.PlanExecutionRequest(childComplexity), true

	case "TerraformDriftCheckRequest.planExecutionRequestID":
		if e.complexity.TerraformDriftCheckRequest.PlanExecutionRequestID == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.PlanExecutionRequestID(childComplexity), true

	case "TerraformDriftCheckRequest.startedAt":
		if e.complexity.TerraformDriftCheckRequest.StartedAt == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.StartedAt(childComplexity), true

	case "TerraformDriftCheckRequest.status":
		if e.complexity.TerraformDriftCheckRequest.Status == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.Status(childComplexity), true

	case "TerraformDriftCheckRequest.syncStatus":
		if e.complexity.TerraformDriftCheckRequest.SyncStatus == nil {
			break
		}

		return e.complexity.TerraformDriftCheckRequest.SyncStatus(childComplexity), true

	case "TerraformExecutionRequest.applyExecutionRequest":
		if e.complexity.TerraformExecutionRequest.ApplyExecutionRequest == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ApplyExecutionRequest(childComplexity), true

	case "TerraformExecutionRequest.applyExecutionRequestID":
		if e.complexity.TerraformExecutionRequest.ApplyExecutionRequestID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ApplyExecutionRequestID(childComplexity), true

	case "TerraformExecutionRequest.completedAt":
		if e.complexity.TerraformExecutionRequest.CompletedAt == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.CompletedAt(childComplexity), true

	case "TerraformExecutionRequest.destroy":
		if e.complexity.TerraformExecutionRequest.Destroy == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.Destroy(childComplexity), true

	case "TerraformExecutionRequest.id":
		if e.complexity.TerraformExecutionRequest.ID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ID(childComplexity), true

	case "TerraformExecutionRequest.moduleAssignment":
		if e.complexity.TerraformExecutionRequest.ModuleAssignment == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModuleAssignment(childComplexity), true

	case "TerraformExecutionRequest.moduleAssignmentID":
		if e.complexity.TerraformExecutionRequest.ModuleAssignmentID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModuleAssignmentID(childComplexity), true

	case "TerraformExecutionRequest.modulePropagation":
		if e.complexity.TerraformExecutionRequest.ModulePropagation == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModulePropagation(childComplexity), true

	case "TerraformExecutionRequest.modulePropagationExecutionRequest":
		if e.complexity.TerraformExecutionRequest.ModulePropagationExecutionRequest == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModulePropagationExecutionRequest(childComplexity), true

	case "TerraformExecutionRequest.modulePropagationExecutionRequestID":
		if e.complexity.TerraformExecutionRequest.ModulePropagationExecutionRequestID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModulePropagationExecutionRequestID(childComplexity), true

	case "TerraformExecutionRequest.modulePropagationID":
		if e.complexity.TerraformExecutionRequest.ModulePropagationID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.ModulePropagationID(childComplexity), true

	case "TerraformExecutionRequest.planExecutionRequest":
		if e.complexity.TerraformExecutionRequest.PlanExecutionRequest == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.PlanExecutionRequest(childComplexity), true

	case "TerraformExecutionRequest.planExecutionRequestID":
		if e.complexity.TerraformExecutionRequest.PlanExecutionRequestID == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.PlanExecutionRequestID(childComplexity), true

	case "TerraformExecutionRequest.startedAt":
		if e.complexity.TerraformExecutionRequest.StartedAt == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.StartedAt(childComplexity), true

	case "TerraformExecutionRequest.status":
		if e.complexity.TerraformExecutionRequest.Status == nil {
			break
		}

		return e.complexity.TerraformExecutionRequest.Status(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputApplyExecutionRequestFilters,
		ec.unmarshalInputArgumentInput,
		ec.unmarshalInputAwsProviderConfigurationInput,
		ec.unmarshalInputGcpProviderConfigurationInput,
		ec.unmarshalInputMetadataInput,
		ec.unmarshalInputModuleAssignmentFilters,
		ec.unmarshalInputModuleAssignmentUpdate,
		ec.unmarshalInputModuleGroupFilters,
		ec.unmarshalInputModulePropagationDriftCheckRequestFilters,
		ec.unmarshalInputModulePropagationExecutionRequestFilters,
		ec.unmarshalInputModulePropagationFilters,
		ec.unmarshalInputModulePropagationUpdate,
		ec.unmarshalInputModuleVersionFilters,
		ec.unmarshalInputNewModuleAssignment,
		ec.unmarshalInputNewModuleGroup,
		ec.unmarshalInputNewModulePropagation,
		ec.unmarshalInputNewModulePropagationDriftCheckRequest,
		ec.unmarshalInputNewModulePropagationExecutionRequest,
		ec.unmarshalInputNewModuleVersion,
		ec.unmarshalInputNewOrgAccount,
		ec.unmarshalInputNewOrgDimension,
		ec.unmarshalInputNewOrgUnit,
		ec.unmarshalInputNewTerraformDriftCheckRequest,
		ec.unmarshalInputNewTerraformExecutionRequest,
		ec.unmarshalInputOrgAccountFilters,
		ec.unmarshalInputOrgAccountUpdate,
		ec.unmarshalInputOrgDimensionFilters,
		ec.unmarshalInputOrgUnitFilters,
		ec.unmarshalInputOrgUnitUpdate,
		ec.unmarshalInputPlanExecutionRequestFilters,
		ec.unmarshalInputTerraformDriftCheckRequestFilters,
		ec.unmarshalInputTerraformExecutionRequestFilters,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../apply_execution_requests.graphqls", Input: `type ApplyExecutionRequest {
  id: ID!
  moduleAssignmentID: ID!
  moduleAssignment: ModuleAssignment!
  terraformVersion: String!
  terraformConfigurationBase64: String!
  terraformPlanBase64: String!
  additionalArguments: String
  terraformExecutionRequestID: ID!
  status: RequestStatus!
  initOutput: String
  applyOutput: String
  startedAt: Time
  completedAt: Time
}

input ApplyExecutionRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  destroy: Boolean
  status: RequestStatus
}

extend type Query {
  applyExecutionRequest(applyExecutionRequestID: ID!): ApplyExecutionRequest!
}
`, BuiltIn: false},
	{Name: "../cloud_platform.graphqls", Input: `enum CloudPlatform {
  aws
  azure
  gcp
}
`, BuiltIn: false},
	{Name: "../metadata.graphqls", Input: `type Metadata {
  name: String!
  value: String!
}

input MetadataInput {
  name: String!
  value: String!
}
`, BuiltIn: false},
	{Name: "../module_assignments.graphqls", Input: `type ModuleAssignment {
  id: ID!
  moduleVersionID: ID!
  moduleVersion: ModuleVersion!
  moduleGroupID: ID!
  moduleGroup: ModuleGroup!
  orgAccountID: ID!
  orgAccount: OrgAccount!
  name: String!
  description: String!
  remoteStateRegion: String!
  remoteStateBucket: String!
  remoteStateKey: String!
  arguments: [Argument!]!
  awsProviderConfigurations: [AwsProviderConfiguration!]
  gcpProviderConfigurations: [GcpProviderConfiguration!]
  status: ModuleAssignmentStatus!
  modulePropagationID: ID
  modulePropagation: ModulePropagation
  terraformDriftCheckRequests(
    filters: TerraformDriftCheckRequestFilters
    limit: Int
    offset: Int
  ): [TerraformDriftCheckRequest!]!
  terraformExecutionRequests(
    filters: TerraformExecutionRequestFilters
    limit: Int
    offset: Int
  ): [TerraformExecutionRequest!]!
  terraformConfiguration: String!
}

input NewModuleAssignment {
  moduleVersionID: ID!
  moduleGroupID: ID!
  orgAccountID: ID!
  name: String!
  description: String!
  arguments: [ArgumentInput!]!
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input ModuleAssignmentUpdate {
  name: String
  description: String
  moduleVersionID: ID
  arguments: [ArgumentInput!]
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input ModuleAssignmentFilters {
  nameContains: String
  descriptionContains: String
  status: ModuleAssignmentStatus
  isPropagated: Boolean
}

enum ModuleAssignmentStatus {
  ACTIVE
  INACTIVE
}

extend type Query {
  moduleAssignment(moduleAssignmentID: ID!): ModuleAssignment!
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
}

extend type Mutation {
  createModuleAssignment(
    moduleAssignment: NewModuleAssignment!
  ): ModuleAssignment!
  updateModuleAssignment(
    moduleAssignmentID: ID!
    moduleAssignmentUpdate: ModuleAssignmentUpdate!
  ): ModuleAssignment!
}
`, BuiltIn: false},
	{Name: "../module_groups.graphqls", Input: `type ModuleGroup {
  id: ID!
  name: String!
  cloudPlatform: CloudPlatform!
  versions(
    filters: ModuleVersionFilters
    limit: Int
    offset: Int
  ): [ModuleVersion!]!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
}

input NewModuleGroup {
  name: String!
  cloudPlatform: CloudPlatform!
}

input ModuleGroupFilters {
  nameContains: String
  cloudPlatform: CloudPlatform
}

extend type Query {
  moduleGroup(id: ID!): ModuleGroup!
  moduleGroups(
    filters: ModuleGroupFilters
    limit: Int
    offset: Int
  ): [ModuleGroup!]!
}

extend type Mutation {
  createModuleGroup(moduleGroup: NewModuleGroup!): ModuleGroup!
  deleteModuleGroup(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "../module_propagation_drift_check_requests.graphqls", Input: `type ModulePropagationDriftCheckRequest {
  id: ID!
  modulePropagationID: ID!
  modulePropagation: ModulePropagation!
  startedAt: Time
  completedAt: Time
  status: RequestStatus!
  syncStatus: TerraformDriftCheckStatus!
  terraformDriftCheckRequests(
    filters: TerraformDriftCheckRequestFilters
    limit: Int
    offset: Int
  ): [TerraformDriftCheckRequest!]!
}

input NewModulePropagationDriftCheckRequest {
  modulePropagationID: ID!
}

input ModulePropagationDriftCheckRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  status: RequestStatus
  syncStatus: TerraformDriftCheckStatus
}

extend type Query {
  modulePropagationDriftCheckRequest(
    modulePropagationDriftCheckRequestID: ID!
  ): ModulePropagationDriftCheckRequest!
  modulePropagationDriftCheckRequests(
    filters: ModulePropagationDriftCheckRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationDriftCheckRequest!]!
}

extend type Mutation {
  createModulePropagationDriftCheckRequest(
    modulePropagationDriftCheckRequest: NewModulePropagationDriftCheckRequest!
  ): ModulePropagationDriftCheckRequest!
}
`, BuiltIn: false},
	{Name: "../module_propagation_execution_requests.graphqls", Input: `type ModulePropagationExecutionRequest {
  id: ID!
  modulePropagationID: ID!
  modulePropagation: ModulePropagation!
  startedAt: Time
  completedAt: Time
  status: RequestStatus!
  terraformExecutionRequests(
    filters: TerraformExecutionRequestFilters
    limit: Int
    offset: Int
  ): [TerraformExecutionRequest!]!
}

input NewModulePropagationExecutionRequest {
  modulePropagationID: ID!
}

input ModulePropagationExecutionRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  status: RequestStatus
}

extend type Query {
  modulePropagationExecutionRequest(
    modulePropagationExecutionRequestId: ID!
  ): ModulePropagationExecutionRequest!
  modulePropagationExecutionRequests(
    filters: ModulePropagationExecutionRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationExecutionRequest!]!
}

extend type Mutation {
  createModulePropagationExecutionRequest(
    modulePropagationExecutionRequest: NewModulePropagationExecutionRequest!
  ): ModulePropagationExecutionRequest!
}
`, BuiltIn: false},
	{Name: "../module_propagations.graphqls", Input: `type ModulePropagation {
  id: ID!
  moduleVersionID: ID!
  moduleVersion: ModuleVersion!
  moduleGroupID: ID!
  moduleGroup: ModuleGroup!
  orgUnitID: ID!
  orgUnit: OrgUnit!
  orgDimensionID: ID!
  orgDimension: OrgDimension!
  name: String!
  description: String!
  arguments: [Argument!]!
  awsProviderConfigurations: [AwsProviderConfiguration!]
  gcpProviderConfigurations: [GcpProviderConfiguration!]
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
  executionRequests(
    filters: ModulePropagationExecutionRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationExecutionRequest!]!
  driftCheckRequests(
    filters: ModulePropagationDriftCheckRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationDriftCheckRequest!]!
}

type AwsProviderConfiguration {
  region: String!
  alias: String
}

type GcpProviderConfiguration {
  region: String!
  alias: String
}

type Argument {
  name: String!
  value: String!
}

input NewModulePropagation {
  moduleVersionID: ID!
  moduleGroupID: ID!
  orgUnitID: ID!
  orgDimensionID: ID!
  name: String!
  description: String!
  arguments: [ArgumentInput!]!
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input AwsProviderConfigurationInput {
  region: String!
  alias: String
}

input GcpProviderConfigurationInput {
  region: String!
  alias: String
}

input ModulePropagationUpdate {
  orgDimensionID: ID
  orgUnitID: ID
  moduleVersionID: ID
  name: String
  description: String
  arguments: [ArgumentInput!]
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input ArgumentInput {
  name: String!
  value: String!
}

input ModulePropagationFilters {
  nameContains: String
  descriptionContains: String
}

extend type Query {
  modulePropagation(modulePropagationID: ID!): ModulePropagation!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
}

extend type Mutation {
  createModulePropagation(
    modulePropagation: NewModulePropagation!
  ): ModulePropagation!
  deleteModulePropagation(modulePropagationID: ID!): Boolean!
  updateModulePropagation(
    modulePropagationID: ID!
    update: ModulePropagationUpdate!
  ): ModulePropagation!
}
`, BuiltIn: false},
	{Name: "../module_versions.graphqls", Input: `type ModuleVersion {
  id: ID!
  moduleGroupID: ID!
  moduleGroup: ModuleGroup!
  name: String!
  remoteSource: String!
  terraformVersion: String!
  variables: [ModuleVariable!]!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
}

type ModuleVariable {
  name: String!
  type: String!
  description: String!
  default: String
}

input NewModuleVersion {
  moduleGroupId: ID!
  name: String!
  remoteSource: String!
  terraformVersion: String!
}

input ModuleVersionFilters {
  nameContains: String
  remoteSourceContains: String
  terraformVersion: String
}

extend type Query {
  moduleVersion(moduleVersionId: ID!): ModuleVersion!
  moduleVersions(
    filters: ModuleVersionFilters
    limit: Int
    offset: Int
  ): [ModuleVersion!]!
}

extend type Mutation {
  createModuleVersion(moduleVersion: NewModuleVersion!): ModuleVersion!
  deleteModuleVersion(moduleVersionId: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "../organizational_accounts.graphqls", Input: `type OrgAccount {
  id: ID!
  name: String!
  cloudPlatform: CloudPlatform!
  cloudIdentifier: String!
  assumeRoleName: String!
  orgUnits(filters: OrgUnitFilters, limit: Int, offset: Int): [OrgUnit!]!
  metadata: [Metadata!]!
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
}

input NewOrgAccount {
  name: String!
  cloudPlatform: CloudPlatform!
  cloudIdentifier: String!
  assumeRoleName: String!
  metadata: [MetadataInput!]!
}

input OrgAccountUpdate {
  name: String
  cloudPlatform: CloudPlatform
  cloudIdentifier: String
  assumeRoleName: String
  metadata: [MetadataInput!]
}

input OrgAccountFilters {
  nameContains: String
  cloudPlatform: CloudPlatform
  cloudIdentifier: String
}

extend type Query {
  orgAccount(orgAccountID: ID!): OrgAccount!
  orgAccounts(
    filters: OrgAccountFilters
    limit: Int
    offset: Int
  ): [OrgAccount!]!
}

extend type Mutation {
  createOrgAccount(orgAccount: NewOrgAccount!): OrgAccount!
  deleteOrgAccount(orgAccountID: ID!): Boolean!
  updateOrgAccount(
    orgAccountID: ID!
    orgAccount: OrgAccountUpdate!
  ): OrgAccount!
}
`, BuiltIn: false},
	{Name: "../organizational_dimensions.graphqls", Input: `type OrgDimension {
  id: ID!
  name: String!
  rootOrgUnit: OrgUnit!
  orgUnits(filters: OrgUnitFilters, limit: Int, offset: Int): [OrgUnit!]!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
}

input NewOrgDimension {
  name: String!
}

input OrgDimensionFilters {
  nameContains: String
}

extend type Query {
  orgDimension(orgDimensionID: ID!): OrgDimension!
  orgDimensions(
    filters: OrgDimensionFilters
    limit: Int
    offset: Int
  ): [OrgDimension!]!
}

extend type Mutation {
  createOrgDimension(orgDimension: NewOrgDimension!): OrgDimension!
  deleteOrgDimension(orgDimensionID: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "../organizational_units.graphqls", Input: `type OrgUnit {
  id: ID!
  name: String!
  orgDimensionID: ID!
  orgDimension: OrgDimension!
  hierarchy: String!
  parentOrgUnitID: ID
  parentOrgUnit: OrgUnit
  children(filters: OrgUnitFilters, limit: Int, offset: Int): [OrgUnit!]!
  downstreamOrgUnits(
    filters: OrgUnitFilters
    limit: Int
    offset: Int
  ): [OrgUnit!]!
  upstreamOrgUnits(
    filters: OrgUnitFilters
    limit: Int
    offset: Int
  ): [OrgUnit!]!
  orgAccounts(
    filters: OrgAccountFilters
    limit: Int
    offset: Int
  ): [OrgAccount!]!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
}

input OrgUnitUpdate {
  Name: String
  ParentOrgUnitID: ID
}

input NewOrgUnit {
  name: String!
  orgDimensionID: ID!
  parentOrgUnitId: ID!
}

input OrgUnitFilters {
  nameContains: String
}

extend type Query {
  orgUnit(orgUnitID: ID!): OrgUnit!
}

extend type Mutation {
  createOrgUnit(orgUnit: NewOrgUnit!): OrgUnit!
  deleteOrgUnit(orgUnitID: ID!): Boolean!
  updateOrgUnit(orgUnitID: ID!, update: OrgUnitUpdate!): OrgUnit!
  addAccountToOrgUnit(orgUnitID: ID!, orgAccountID: ID!): Boolean!
  removeAccountFromOrgUnit(orgUnitID: ID!, orgAccountID: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "../plan_execution_requests.graphqls", Input: `type PlanExecutionRequest {
  id: ID!
  moduleAssignmentID: ID!
  moduleAssignment: ModuleAssignment!
  terraformVersion: String!
  terraformConfigurationBase64: String!
  additionalArguments: String
  terraformExecutionRequestID: ID
  terraformDriftCheckRequestID: ID
  status: RequestStatus!
  initOutput: String
  planOutput: String
  planFile: String
  planJSON: String
  startedAt: Time
  completedAt: Time
}

input PlanExecutionRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  destroy: Boolean
  status: RequestStatus
}

extend type Query {
  planExecutionRequest(planExecutionRequestID: ID!): PlanExecutionRequest!
}
`, BuiltIn: false},
	{Name: "../request_status.graphqls", Input: `enum RequestStatus {
  PENDING
  RUNNING
  FAILED
  SUCCEEDED
}
`, BuiltIn: false},
	{Name: "../scalar.graphqls", Input: `scalar Time
`, BuiltIn: false},
	{Name: "../terraform_drift_check_requests.graphqls", Input: `type TerraformDriftCheckRequest {
  id: ID!
  moduleAssignmentID: ID!
  moduleAssignment: ModuleAssignment!
  planExecutionRequestID: ID
  planExecutionRequest: PlanExecutionRequest
  startedAt: Time
  completedAt: Time
  status: RequestStatus!
  syncStatus: TerraformDriftCheckStatus!
  destroy: Boolean!
  modulePropagationID: ID
  modulePropagation: ModulePropagation
  modulePropagationDriftCheckRequestID: ID
  modulePropagationDriftCheckRequest: ModulePropagationDriftCheckRequest
}

enum TerraformDriftCheckStatus {
  PENDING
  IN_SYNC
  OUT_OF_SYNC
}

input NewTerraformDriftCheckRequest {
  moduleAssignmentID: ID!
}

input TerraformDriftCheckRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  destroy: Boolean
  status: RequestStatus
  syncStatus: TerraformDriftCheckStatus
}

extend type Mutation {
  createTerraformDriftCheckRequest(
    terraformDriftCheckRequest: NewTerraformDriftCheckRequest!
  ): TerraformDriftCheckRequest!
}
`, BuiltIn: false},
	{Name: "../terraform_execution_requests.graphqls", Input: `type TerraformExecutionRequest {
  id: ID!
  moduleAssignmentID: ID!
  moduleAssignment: ModuleAssignment!
  planExecutionRequestID: ID
  planExecutionRequest: PlanExecutionRequest
  applyExecutionRequestID: ID
  applyExecutionRequest: ApplyExecutionRequest
  startedAt: Time
  completedAt: Time
  status: RequestStatus!
  destroy: Boolean!
  modulePropagationID: ID
  modulePropagation: ModulePropagation
  modulePropagationExecutionRequestID: ID
  modulePropagationExecutionRequest: ModulePropagationExecutionRequest
}

input NewTerraformExecutionRequest {
  moduleAssignmentID: ID!
  destroy: Boolean!
}

input TerraformExecutionRequestFilters {
  startedBefore: Time
  startedAfter: Time
  completedBefore: Time
  completedAfter: Time
  destroy: Boolean
  status: RequestStatus
}

extend type Mutation {
  createTerraformExecutionRequest(
    terraformExecutionRequest: NewTerraformExecutionRequest!
  ): TerraformExecutionRequest!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_ModuleAssignment_terraformDriftCheckRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.TerraformDriftCheckRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOTerraformDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleAssignment_terraformExecutionRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.TerraformExecutionRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOTerraformExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleGroup_moduleAssignments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleAssignmentFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleGroup_modulePropagations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleGroup_versions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleVersionFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleVersionFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.TerraformDriftCheckRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOTerraformDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModulePropagationExecutionRequest_terraformExecutionRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.TerraformExecutionRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOTerraformExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModulePropagation_driftCheckRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationDriftCheckRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModulePropagation_executionRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationExecutionRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModulePropagation_moduleAssignments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleAssignmentFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleVersion_moduleAssignments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleAssignmentFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_ModuleVersion_modulePropagations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addAccountToOrgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgUnitID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnitID"] = arg0
	var arg1 uint
	if tmp, ok := rawArgs["orgAccountID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
		arg1, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccountID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createModuleAssignment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModuleAssignment
	if tmp, ok := rawArgs["moduleAssignment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignment"))
		arg0, err = ec.unmarshalNNewModuleAssignment2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleAssignment(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleAssignment"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModuleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModuleGroup
	if tmp, ok := rawArgs["moduleGroup"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGroup"))
		arg0, err = ec.unmarshalNNewModuleGroup2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleGroup(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleGroup"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModulePropagationDriftCheckRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModulePropagationDriftCheckRequest
	if tmp, ok := rawArgs["modulePropagationDriftCheckRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationDriftCheckRequest"))
		arg0, err = ec.unmarshalNNewModulePropagationDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagationDriftCheckRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationDriftCheckRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModulePropagationExecutionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModulePropagationExecutionRequest
	if tmp, ok := rawArgs["modulePropagationExecutionRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationExecutionRequest"))
		arg0, err = ec.unmarshalNNewModulePropagationExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagationExecutionRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationExecutionRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModulePropagation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModulePropagation
	if tmp, ok := rawArgs["modulePropagation"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagation"))
		arg0, err = ec.unmarshalNNewModulePropagation2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagation"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModuleVersion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewModuleVersion
	if tmp, ok := rawArgs["moduleVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersion"))
		arg0, err = ec.unmarshalNNewModuleVersion2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleVersion(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleVersion"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrgAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewOrgAccount
	if tmp, ok := rawArgs["orgAccount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccount"))
		arg0, err = ec.unmarshalNNewOrgAccount2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccount"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrgDimension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewOrgDimension
	if tmp, ok := rawArgs["orgDimension"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimension"))
		arg0, err = ec.unmarshalNNewOrgDimension2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgDimension(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgDimension"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewOrgUnit
	if tmp, ok := rawArgs["orgUnit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnit"))
		arg0, err = ec.unmarshalNNewOrgUnit2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgUnit(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTerraformDriftCheckRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewTerraformDriftCheckRequest
	if tmp, ok := rawArgs["terraformDriftCheckRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terraformDriftCheckRequest"))
		arg0, err = ec.unmarshalNNewTerraformDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewTerraformDriftCheckRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["terraformDriftCheckRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTerraformExecutionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.NewTerraformExecutionRequest
	if tmp, ok := rawArgs["terraformExecutionRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terraformExecutionRequest"))
		arg0, err = ec.unmarshalNNewTerraformExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewTerraformExecutionRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["terraformExecutionRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteModuleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteModulePropagation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["modulePropagationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteModuleVersion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["moduleVersionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionId"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleVersionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrgAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgAccountID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccountID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrgDimension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgDimensionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimensionID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgDimensionID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgUnitID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnitID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeAccountFromOrgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgUnitID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnitID"] = arg0
	var arg1 uint
	if tmp, ok := rawArgs["orgAccountID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
		arg1, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccountID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateModuleAssignment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["moduleAssignmentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignmentID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleAssignmentID"] = arg0
	var arg1 models.ModuleAssignmentUpdate
	if tmp, ok := rawArgs["moduleAssignmentUpdate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignmentUpdate"))
		arg1, err = ec.unmarshalNModuleAssignmentUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentUpdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleAssignmentUpdate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateModulePropagation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["modulePropagationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationID"] = arg0
	var arg1 models.ModulePropagationUpdate
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg1, err = ec.unmarshalNModulePropagationUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationUpdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgAccountID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccountID"] = arg0
	var arg1 models.OrgAccountUpdate
	if tmp, ok := rawArgs["orgAccount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccount"))
		arg1, err = ec.unmarshalNOrgAccountUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountUpdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccount"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgUnitID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnitID"] = arg0
	var arg1 models.OrgUnitUpdate
	if tmp, ok := rawArgs["update"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update"))
		arg1, err = ec.unmarshalNOrgUnitUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitUpdate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["update"] = arg1
	return args, nil
}

func (ec *executionContext) field_OrgAccount_moduleAssignments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleAssignmentFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgAccount_orgUnits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgUnitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgDimension_modulePropagations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgDimension_orgUnits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgUnitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgUnit_children_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgUnitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgUnit_downstreamOrgUnits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgUnitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgUnit_modulePropagations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgUnit_orgAccounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgAccountFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgAccountFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_OrgUnit_upstreamOrgUnits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgUnitFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_applyExecutionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["applyExecutionRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("applyExecutionRequestID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["applyExecutionRequestID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moduleAssignment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["moduleAssignmentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignmentID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleAssignmentID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moduleAssignments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleAssignmentFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_moduleGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moduleGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleGroupFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleGroupFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroupFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagationDriftCheckRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["modulePropagationDriftCheckRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationDriftCheckRequestID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationDriftCheckRequestID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagationDriftCheckRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationDriftCheckRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagationExecutionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["modulePropagationExecutionRequestId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationExecutionRequestId"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationExecutionRequestId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagationExecutionRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationExecutionRequestFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["modulePropagationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modulePropagationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modulePropagations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModulePropagationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_moduleVersion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["moduleVersionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionId"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moduleVersionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_moduleVersions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.ModuleVersionFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOModuleVersionFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_orgAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgAccountID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgAccountID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orgAccounts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgAccountFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgAccountFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_orgDimension_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgDimensionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimensionID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgDimensionID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orgDimensions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.OrgDimensionFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOOrgDimensionFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimensionFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_orgUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["orgUnitID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgUnitID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planExecutionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uint
	if tmp, ok := rawArgs["planExecutionRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planExecutionRequestID"))
		arg0, err = ec.unmarshalNID2uint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["planExecutionRequestID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ApplyExecutionRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_moduleAssignmentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleAssignmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_moduleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplyExecutionRequest().ModuleAssignment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_terraformVersion(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_terraformVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_terraformVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_terraformConfigurationBase64(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_terraformConfigurationBase64(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformConfigurationBase64, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_terraformConfigurationBase64(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_terraformPlanBase64(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_terraformPlanBase64(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformPlanBase64, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_terraformPlanBase64(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_additionalArguments(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_additionalArguments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalArguments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_additionalArguments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_terraformExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_terraformExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_terraformExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_initOutput(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_initOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplyExecutionRequest().InitOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_initOutput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_applyOutput(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_applyOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ApplyExecutionRequest().ApplyOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_applyOutput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplyExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.ApplyExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplyExecutionRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplyExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplyExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Argument_name(ctx context.Context, field graphql.CollectedField, obj *models.Argument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Argument_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Argument_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Argument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Argument_value(ctx context.Context, field graphql.CollectedField, obj *models.Argument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Argument_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Argument_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Argument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AwsProviderConfiguration_region(ctx context.Context, field graphql.CollectedField, obj *models.AwsProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AwsProviderConfiguration_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AwsProviderConfiguration_region(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AwsProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AwsProviderConfiguration_alias(ctx context.Context, field graphql.CollectedField, obj *models.AwsProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AwsProviderConfiguration_alias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AwsProviderConfiguration_alias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AwsProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GcpProviderConfiguration_region(ctx context.Context, field graphql.CollectedField, obj *models.GcpProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GcpProviderConfiguration_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GcpProviderConfiguration_region(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GcpProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GcpProviderConfiguration_alias(ctx context.Context, field graphql.CollectedField, obj *models.GcpProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GcpProviderConfiguration_alias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GcpProviderConfiguration_alias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GcpProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_name(ctx context.Context, field graphql.CollectedField, obj *models.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_value(ctx context.Context, field graphql.CollectedField, obj *models.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_id(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_moduleVersionID(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_moduleVersionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_moduleVersion(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().ModuleVersion(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_moduleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_moduleGroupID(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_moduleGroupID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_moduleGroup(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().ModuleGroup(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_moduleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_orgAccountID(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgAccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_orgAccountID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_orgAccount(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().OrgAccount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_orgAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_name(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_description(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_remoteStateRegion(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteStateRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_remoteStateRegion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_remoteStateBucket(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteStateBucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_remoteStateBucket(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_remoteStateKey(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteStateKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_remoteStateKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_arguments(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_arguments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Arguments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Argument)
	fc.Result = res
	return ec.marshalNArgument2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_arguments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Argument_name(ctx, field)
			case "value":
				return ec.fieldContext_Argument_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Argument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_awsProviderConfigurations(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsProviderConfigurations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.AwsProviderConfiguration)
	fc.Result = res
	return ec.marshalOAwsProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_awsProviderConfigurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "region":
				return ec.fieldContext_AwsProviderConfiguration_region(ctx, field)
			case "alias":
				return ec.fieldContext_AwsProviderConfiguration_alias(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AwsProviderConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_gcpProviderConfigurations(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcpProviderConfigurations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.GcpProviderConfiguration)
	fc.Result = res
	return ec.marshalOGcpProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "region":
				return ec.fieldContext_GcpProviderConfiguration_region(ctx, field)
			case "alias":
				return ec.fieldContext_GcpProviderConfiguration_alias(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GcpProviderConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_status(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ModuleAssignmentStatus)
	fc.Result = res
	return ec.marshalNModuleAssignmentStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModuleAssignmentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_modulePropagationID(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_modulePropagationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_modulePropagation(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().ModulePropagation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalOModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_terraformDriftCheckRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().TerraformDriftCheckRequests(rctx, obj, fc.Args["filters"].(*models.TerraformDriftCheckRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TerraformDriftCheckRequest)
	fc.Result = res
	return ec.marshalNTerraformDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformDriftCheckRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_TerraformDriftCheckRequest_syncStatus(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformDriftCheckRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagation(ctx, field)
			case "modulePropagationDriftCheckRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx, field)
			case "modulePropagationDriftCheckRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleAssignment_terraformDriftCheckRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_terraformExecutionRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().TerraformExecutionRequests(rctx, obj, fc.Args["filters"].(*models.TerraformExecutionRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TerraformExecutionRequest)
	fc.Result = res
	return ec.marshalNTerraformExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_terraformExecutionRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequest(ctx, field)
			case "applyExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequestID(ctx, field)
			case "applyExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformExecutionRequest_status(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformExecutionRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagation(ctx, field)
			case "modulePropagationExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx, field)
			case "modulePropagationExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleAssignment_terraformExecutionRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleAssignment_terraformConfiguration(ctx context.Context, field graphql.CollectedField, obj *models.ModuleAssignment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleAssignment().TerraformConfiguration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleAssignment_terraformConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleAssignment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_id(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_name(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_cloudPlatform(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloudPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.CloudPlatform)
	fc.Result = res
	return ec.marshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_cloudPlatform(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CloudPlatform does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_versions(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_versions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleGroup().Versions(rctx, obj, fc.Args["filters"].(*models.ModuleVersionFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_versions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleGroup_versions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_modulePropagations(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleGroup().ModulePropagations(rctx, obj, fc.Args["filters"].(*models.ModulePropagationFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_modulePropagations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleGroup_modulePropagations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleGroup_moduleAssignments(ctx context.Context, field graphql.CollectedField, obj *models.ModuleGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleGroup().ModuleAssignments(rctx, obj, fc.Args["filters"].(*models.ModuleAssignmentFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleGroup_moduleAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleGroup_moduleAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_id(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_moduleVersionID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleVersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_moduleVersionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_moduleVersion(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().ModuleVersion(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_moduleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_moduleGroupID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_moduleGroupID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_moduleGroup(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().ModuleGroup(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_moduleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_orgUnitID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_orgUnitID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_orgUnit(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().OrgUnit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_orgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_orgDimensionID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgDimensionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_orgDimensionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_orgDimension(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().OrgDimension(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgDimension)
	fc.Result = res
	return ec.marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_orgDimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgDimension_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgDimension_name(ctx, field)
			case "rootOrgUnit":
				return ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgDimension_orgUnits(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgDimension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_name(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_description(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_arguments(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_arguments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Arguments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Argument)
	fc.Result = res
	return ec.marshalNArgument2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_arguments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Argument_name(ctx, field)
			case "value":
				return ec.fieldContext_Argument_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Argument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_awsProviderConfigurations(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsProviderConfigurations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.AwsProviderConfiguration)
	fc.Result = res
	return ec.marshalOAwsProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_awsProviderConfigurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "region":
				return ec.fieldContext_AwsProviderConfiguration_region(ctx, field)
			case "alias":
				return ec.fieldContext_AwsProviderConfiguration_alias(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AwsProviderConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_gcpProviderConfigurations(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcpProviderConfigurations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.GcpProviderConfiguration)
	fc.Result = res
	return ec.marshalOGcpProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_gcpProviderConfigurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "region":
				return ec.fieldContext_GcpProviderConfiguration_region(ctx, field)
			case "alias":
				return ec.fieldContext_GcpProviderConfiguration_alias(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GcpProviderConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_moduleAssignments(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().ModuleAssignments(rctx, obj, fc.Args["filters"].(*models.ModuleAssignmentFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_moduleAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModulePropagation_moduleAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_executionRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().ExecutionRequests(rctx, obj, fc.Args["filters"].(*models.ModulePropagationExecutionRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagationExecutionRequest)
	fc.Result = res
	return ec.marshalNModulePropagationExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_executionRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModulePropagation_executionRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagation_driftCheckRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagation().DriftCheckRequests(rctx, obj, fc.Args["filters"].(*models.ModulePropagationDriftCheckRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagationDriftCheckRequest)
	fc.Result = res
	return ec.marshalNModulePropagationDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagation_driftCheckRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModulePropagation_driftCheckRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_modulePropagation(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagationDriftCheckRequest().ModulePropagation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_syncStatus(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TerraformDriftCheckStatus)
	fc.Result = res
	return ec.marshalNTerraformDriftCheckStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TerraformDriftCheckStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagationDriftCheckRequest().TerraformDriftCheckRequests(rctx, obj, fc.Args["filters"].(*models.TerraformDriftCheckRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TerraformDriftCheckRequest)
	fc.Result = res
	return ec.marshalNTerraformDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformDriftCheckRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_TerraformDriftCheckRequest_syncStatus(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformDriftCheckRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagation(ctx, field)
			case "modulePropagationDriftCheckRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx, field)
			case "modulePropagationDriftCheckRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_modulePropagation(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagationExecutionRequest().ModulePropagation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModulePropagationExecutionRequest_terraformExecutionRequests(ctx context.Context, field graphql.CollectedField, obj *models.ModulePropagationExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModulePropagationExecutionRequest().TerraformExecutionRequests(rctx, obj, fc.Args["filters"].(*models.TerraformExecutionRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TerraformExecutionRequest)
	fc.Result = res
	return ec.marshalNTerraformExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModulePropagationExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequest(ctx, field)
			case "applyExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequestID(ctx, field)
			case "applyExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformExecutionRequest_status(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformExecutionRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagation(ctx, field)
			case "modulePropagationExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx, field)
			case "modulePropagationExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModulePropagationExecutionRequest_terraformExecutionRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVariable_name(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVariable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVariable_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVariable_type(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVariable_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVariable_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVariable_description(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVariable_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVariable_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVariable_default(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVariable_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVariable_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_id(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_moduleGroupID(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_moduleGroupID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_moduleGroup(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleVersion().ModuleGroup(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_moduleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_name(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_remoteSource(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoteSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_remoteSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_terraformVersion(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_terraformVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_variables(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_variables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleVariable)
	fc.Result = res
	return ec.marshalNModuleVariable2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_variables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ModuleVariable_name(ctx, field)
			case "type":
				return ec.fieldContext_ModuleVariable_type(ctx, field)
			case "description":
				return ec.fieldContext_ModuleVariable_description(ctx, field)
			case "default":
				return ec.fieldContext_ModuleVariable_default(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_modulePropagations(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleVersion().ModulePropagations(rctx, obj, fc.Args["filters"].(*models.ModulePropagationFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_modulePropagations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleVersion_modulePropagations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModuleVersion_moduleAssignments(ctx context.Context, field graphql.CollectedField, obj *models.ModuleVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModuleVersion().ModuleAssignments(rctx, obj, fc.Args["filters"].(*models.ModuleAssignmentFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModuleVersion_moduleAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModuleVersion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModuleVersion_moduleAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModuleAssignment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModuleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModuleAssignment(rctx, fc.Args["moduleAssignment"].(models.NewModuleAssignment))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModuleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModuleAssignment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateModuleAssignment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateModuleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateModuleAssignment(rctx, fc.Args["moduleAssignmentID"].(uint), fc.Args["moduleAssignmentUpdate"].(models.ModuleAssignmentUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateModuleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateModuleAssignment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModuleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModuleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModuleGroup(rctx, fc.Args["moduleGroup"].(models.NewModuleGroup))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModuleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModuleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteModuleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteModuleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteModuleGroup(rctx, fc.Args["id"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteModuleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteModuleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModulePropagationDriftCheckRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModulePropagationDriftCheckRequest(rctx, fc.Args["modulePropagationDriftCheckRequest"].(models.NewModulePropagationDriftCheckRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationDriftCheckRequest)
	fc.Result = res
	return ec.marshalNModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModulePropagationDriftCheckRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModulePropagationExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModulePropagationExecutionRequest(rctx, fc.Args["modulePropagationExecutionRequest"].(models.NewModulePropagationExecutionRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationExecutionRequest)
	fc.Result = res
	return ec.marshalNModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModulePropagationExecutionRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModulePropagation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModulePropagation(rctx, fc.Args["modulePropagation"].(models.NewModulePropagation))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModulePropagation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteModulePropagation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteModulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteModulePropagation(rctx, fc.Args["modulePropagationID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteModulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteModulePropagation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateModulePropagation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateModulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateModulePropagation(rctx, fc.Args["modulePropagationID"].(uint), fc.Args["update"].(models.ModulePropagationUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateModulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateModulePropagation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModuleVersion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModuleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateModuleVersion(rctx, fc.Args["moduleVersion"].(models.NewModuleVersion))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModuleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModuleVersion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteModuleVersion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteModuleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteModuleVersion(rctx, fc.Args["moduleVersionId"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteModuleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteModuleVersion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrgAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrgAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrgAccount(rctx, fc.Args["orgAccount"].(models.NewOrgAccount))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrgAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrgAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrgAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrgAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrgAccount(rctx, fc.Args["orgAccountID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrgAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrgAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrgAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrgAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgAccount(rctx, fc.Args["orgAccountID"].(uint), fc.Args["orgAccount"].(models.OrgAccountUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrgAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrgAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrgDimension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrgDimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrgDimension(rctx, fc.Args["orgDimension"].(models.NewOrgDimension))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgDimension)
	fc.Result = res
	return ec.marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrgDimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgDimension_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgDimension_name(ctx, field)
			case "rootOrgUnit":
				return ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgDimension_orgUnits(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgDimension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrgDimension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrgDimension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrgDimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrgDimension(rctx, fc.Args["orgDimensionID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrgDimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrgDimension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrgUnit(rctx, fc.Args["orgUnit"].(models.NewOrgUnit))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrgUnit(rctx, fc.Args["orgUnitID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrgUnit(rctx, fc.Args["orgUnitID"].(uint), fc.Args["update"].(models.OrgUnitUpdate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addAccountToOrgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addAccountToOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddAccountToOrgUnit(rctx, fc.Args["orgUnitID"].(uint), fc.Args["orgAccountID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addAccountToOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addAccountToOrgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeAccountFromOrgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeAccountFromOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveAccountFromOrgUnit(rctx, fc.Args["orgUnitID"].(uint), fc.Args["orgAccountID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeAccountFromOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeAccountFromOrgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTerraformDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTerraformDriftCheckRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTerraformDriftCheckRequest(rctx, fc.Args["terraformDriftCheckRequest"].(models.NewTerraformDriftCheckRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TerraformDriftCheckRequest)
	fc.Result = res
	return ec.marshalNTerraformDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTerraformDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformDriftCheckRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformDriftCheckRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_TerraformDriftCheckRequest_syncStatus(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformDriftCheckRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagation(ctx, field)
			case "modulePropagationDriftCheckRequestID":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx, field)
			case "modulePropagationDriftCheckRequest":
				return ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTerraformDriftCheckRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTerraformExecutionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTerraformExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTerraformExecutionRequest(rctx, fc.Args["terraformExecutionRequest"].(models.NewTerraformExecutionRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TerraformExecutionRequest)
	fc.Result = res
	return ec.marshalNTerraformExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTerraformExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TerraformExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_TerraformExecutionRequest_moduleAssignment(ctx, field)
			case "planExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequestID(ctx, field)
			case "planExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_planExecutionRequest(ctx, field)
			case "applyExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequestID(ctx, field)
			case "applyExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_applyExecutionRequest(ctx, field)
			case "startedAt":
				return ec.fieldContext_TerraformExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_TerraformExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_TerraformExecutionRequest_status(ctx, field)
			case "destroy":
				return ec.fieldContext_TerraformExecutionRequest_destroy(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagation(ctx, field)
			case "modulePropagationExecutionRequestID":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx, field)
			case "modulePropagationExecutionRequest":
				return ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerraformExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTerraformExecutionRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_id(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_name(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_cloudPlatform(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloudPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.CloudPlatform)
	fc.Result = res
	return ec.marshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_cloudPlatform(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CloudPlatform does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_cloudIdentifier(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloudIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_cloudIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_assumeRoleName(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssumeRoleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_assumeRoleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_orgUnits(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_orgUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgAccount().OrgUnits(rctx, obj, fc.Args["filters"].(*models.OrgUnitFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_orgUnits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgAccount_orgUnits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_metadata(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Metadata_name(ctx, field)
			case "value":
				return ec.fieldContext_Metadata_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccount_moduleAssignments(ctx context.Context, field graphql.CollectedField, obj *models.OrgAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgAccount().ModuleAssignments(rctx, obj, fc.Args["filters"].(*models.ModuleAssignmentFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccount_moduleAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccount",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgAccount_moduleAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgDimension_id(ctx context.Context, field graphql.CollectedField, obj *models.OrgDimension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgDimension_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgDimension_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgDimension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgDimension_name(ctx context.Context, field graphql.CollectedField, obj *models.OrgDimension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgDimension_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgDimension_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgDimension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgDimension_rootOrgUnit(ctx context.Context, field graphql.CollectedField, obj *models.OrgDimension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgDimension().RootOrgUnit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgDimension_rootOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgDimension",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgDimension_orgUnits(ctx context.Context, field graphql.CollectedField, obj *models.OrgDimension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgDimension_orgUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgDimension().OrgUnits(rctx, obj, fc.Args["filters"].(*models.OrgUnitFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgDimension_orgUnits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgDimension",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgDimension_orgUnits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgDimension_modulePropagations(ctx context.Context, field graphql.CollectedField, obj *models.OrgDimension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgDimension().ModulePropagations(rctx, obj, fc.Args["filters"].(*models.ModulePropagationFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgDimension_modulePropagations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgDimension",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgDimension_modulePropagations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_id(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_name(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_orgDimensionID(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgDimensionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_orgDimensionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_orgDimension(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_orgDimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().OrgDimension(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgDimension)
	fc.Result = res
	return ec.marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_orgDimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgDimension_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgDimension_name(ctx, field)
			case "rootOrgUnit":
				return ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgDimension_orgUnits(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgDimension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_hierarchy(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_hierarchy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hierarchy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_hierarchy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_parentOrgUnitID(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentOrgUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_parentOrgUnitID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_parentOrgUnit(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().ParentOrgUnit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalOOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_parentOrgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_children(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().Children(rctx, obj, fc.Args["filters"].(*models.OrgUnitFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgUnit_children_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_downstreamOrgUnits(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().DownstreamOrgUnits(rctx, obj, fc.Args["filters"].(*models.OrgUnitFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_downstreamOrgUnits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgUnit_downstreamOrgUnits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_upstreamOrgUnits(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().UpstreamOrgUnits(rctx, obj, fc.Args["filters"].(*models.OrgUnitFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_upstreamOrgUnits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgUnit_upstreamOrgUnits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_orgAccounts(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().OrgAccounts(rctx, obj, fc.Args["filters"].(*models.OrgAccountFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_orgAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgUnit_orgAccounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OrgUnit_modulePropagations(ctx context.Context, field graphql.CollectedField, obj *models.OrgUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrgUnit().ModulePropagations(rctx, obj, fc.Args["filters"].(*models.ModulePropagationFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgUnit_modulePropagations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgUnit",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OrgUnit_modulePropagations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_moduleAssignmentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleAssignmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_moduleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanExecutionRequest().ModuleAssignment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_terraformVersion(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_terraformVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_terraformVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_terraformConfigurationBase64(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_terraformConfigurationBase64(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformConfigurationBase64, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_terraformConfigurationBase64(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_additionalArguments(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_additionalArguments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalArguments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_additionalArguments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_terraformExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_terraformExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_terraformExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_terraformDriftCheckRequestID(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_terraformDriftCheckRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerraformDriftCheckRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_terraformDriftCheckRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_initOutput(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_initOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanExecutionRequest().InitOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_initOutput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_planOutput(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_planOutput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanExecutionRequest().PlanOutput(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_planOutput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_planFile(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_planFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanExecutionRequest().PlanFile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_planFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_planJSON(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_planJSON(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanExecutionRequest().PlanJSON(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_planJSON(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.PlanExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanExecutionRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_applyExecutionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_applyExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ApplyExecutionRequest(rctx, fc.Args["applyExecutionRequestID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ApplyExecutionRequest)
	fc.Result = res
	return ec.marshalNApplyExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐApplyExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_applyExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApplyExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_ApplyExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_ApplyExecutionRequest_moduleAssignment(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ApplyExecutionRequest_terraformVersion(ctx, field)
			case "terraformConfigurationBase64":
				return ec.fieldContext_ApplyExecutionRequest_terraformConfigurationBase64(ctx, field)
			case "terraformPlanBase64":
				return ec.fieldContext_ApplyExecutionRequest_terraformPlanBase64(ctx, field)
			case "additionalArguments":
				return ec.fieldContext_ApplyExecutionRequest_additionalArguments(ctx, field)
			case "terraformExecutionRequestID":
				return ec.fieldContext_ApplyExecutionRequest_terraformExecutionRequestID(ctx, field)
			case "status":
				return ec.fieldContext_ApplyExecutionRequest_status(ctx, field)
			case "initOutput":
				return ec.fieldContext_ApplyExecutionRequest_initOutput(ctx, field)
			case "applyOutput":
				return ec.fieldContext_ApplyExecutionRequest_applyOutput(ctx, field)
			case "startedAt":
				return ec.fieldContext_ApplyExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ApplyExecutionRequest_completedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplyExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_applyExecutionRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleAssignment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleAssignment(rctx, fc.Args["moduleAssignmentID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleAssignment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleAssignments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleAssignments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleAssignments(rctx, fc.Args["filters"].(*models.ModuleAssignmentFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleAssignments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleAssignments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleGroup(rctx, fc.Args["id"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleGroups(rctx, fc.Args["filters"].(*models.ModuleGroupFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleGroup)
	fc.Result = res
	return ec.marshalNModuleGroup2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_ModuleGroup_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_ModuleGroup_cloudPlatform(ctx, field)
			case "versions":
				return ec.fieldContext_ModuleGroup_versions(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleGroup_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleGroup_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleGroups_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagationDriftCheckRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagationDriftCheckRequest(rctx, fc.Args["modulePropagationDriftCheckRequestID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationDriftCheckRequest)
	fc.Result = res
	return ec.marshalNModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagationDriftCheckRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagationDriftCheckRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagationDriftCheckRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagationDriftCheckRequests(rctx, fc.Args["filters"].(*models.ModulePropagationDriftCheckRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagationDriftCheckRequest)
	fc.Result = res
	return ec.marshalNModulePropagationDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagationDriftCheckRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationDriftCheckRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagationDriftCheckRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagationExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagationExecutionRequest(rctx, fc.Args["modulePropagationExecutionRequestId"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationExecutionRequest)
	fc.Result = res
	return ec.marshalNModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagationExecutionRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagationExecutionRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagationExecutionRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagationExecutionRequests(rctx, fc.Args["filters"].(*models.ModulePropagationExecutionRequestFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagationExecutionRequest)
	fc.Result = res
	return ec.marshalNModulePropagationExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagationExecutionRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagationExecutionRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagation(rctx, fc.Args["modulePropagationID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modulePropagations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modulePropagations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModulePropagations(rctx, fc.Args["filters"].(*models.ModulePropagationFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModulePropagation)
	fc.Result = res
	return ec.marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modulePropagations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modulePropagations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleVersion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleVersion(rctx, fc.Args["moduleVersionId"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleVersion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_moduleVersions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_moduleVersions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModuleVersions(rctx, fc.Args["filters"].(*models.ModuleVersionFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModuleVersion)
	fc.Result = res
	return ec.marshalNModuleVersion2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_moduleVersions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleVersion_id(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleVersion_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleVersion_moduleGroup(ctx, field)
			case "name":
				return ec.fieldContext_ModuleVersion_name(ctx, field)
			case "remoteSource":
				return ec.fieldContext_ModuleVersion_remoteSource(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ModuleVersion_terraformVersion(ctx, field)
			case "variables":
				return ec.fieldContext_ModuleVersion_variables(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_ModuleVersion_modulePropagations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModuleVersion_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleVersion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_moduleVersions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orgAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orgAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgAccount(rctx, fc.Args["orgAccountID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orgAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orgAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orgAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orgAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgAccounts(rctx, fc.Args["filters"].(*models.OrgAccountFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgAccount)
	fc.Result = res
	return ec.marshalNOrgAccount2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orgAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgAccount_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgAccount_name(ctx, field)
			case "cloudPlatform":
				return ec.fieldContext_OrgAccount_cloudPlatform(ctx, field)
			case "cloudIdentifier":
				return ec.fieldContext_OrgAccount_cloudIdentifier(ctx, field)
			case "assumeRoleName":
				return ec.fieldContext_OrgAccount_assumeRoleName(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgAccount_orgUnits(ctx, field)
			case "metadata":
				return ec.fieldContext_OrgAccount_metadata(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_OrgAccount_moduleAssignments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orgAccounts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orgDimension(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orgDimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgDimension(rctx, fc.Args["orgDimensionID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgDimension)
	fc.Result = res
	return ec.marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orgDimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgDimension_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgDimension_name(ctx, field)
			case "rootOrgUnit":
				return ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgDimension_orgUnits(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgDimension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orgDimension_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orgDimensions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orgDimensions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgDimensions(rctx, fc.Args["filters"].(*models.OrgDimensionFilters), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrgDimension)
	fc.Result = res
	return ec.marshalNOrgDimension2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimensionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orgDimensions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgDimension_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgDimension_name(ctx, field)
			case "rootOrgUnit":
				return ec.fieldContext_OrgDimension_rootOrgUnit(ctx, field)
			case "orgUnits":
				return ec.fieldContext_OrgDimension_orgUnits(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgDimension_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgDimension", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orgDimensions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_orgUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_orgUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrgUnit(rctx, fc.Args["orgUnitID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OrgUnit)
	fc.Result = res
	return ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_orgUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrgUnit_id(ctx, field)
			case "name":
				return ec.fieldContext_OrgUnit_name(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_OrgUnit_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_OrgUnit_orgDimension(ctx, field)
			case "hierarchy":
				return ec.fieldContext_OrgUnit_hierarchy(ctx, field)
			case "parentOrgUnitID":
				return ec.fieldContext_OrgUnit_parentOrgUnitID(ctx, field)
			case "parentOrgUnit":
				return ec.fieldContext_OrgUnit_parentOrgUnit(ctx, field)
			case "children":
				return ec.fieldContext_OrgUnit_children(ctx, field)
			case "downstreamOrgUnits":
				return ec.fieldContext_OrgUnit_downstreamOrgUnits(ctx, field)
			case "upstreamOrgUnits":
				return ec.fieldContext_OrgUnit_upstreamOrgUnits(ctx, field)
			case "orgAccounts":
				return ec.fieldContext_OrgUnit_orgAccounts(ctx, field)
			case "modulePropagations":
				return ec.fieldContext_OrgUnit_modulePropagations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgUnit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_orgUnit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planExecutionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlanExecutionRequest(rctx, fc.Args["planExecutionRequestID"].(uint))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanExecutionRequest)
	fc.Result = res
	return ec.marshalNPlanExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignment(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_PlanExecutionRequest_terraformVersion(ctx, field)
			case "terraformConfigurationBase64":
				return ec.fieldContext_PlanExecutionRequest_terraformConfigurationBase64(ctx, field)
			case "additionalArguments":
				return ec.fieldContext_PlanExecutionRequest_additionalArguments(ctx, field)
			case "terraformExecutionRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformExecutionRequestID(ctx, field)
			case "terraformDriftCheckRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformDriftCheckRequestID(ctx, field)
			case "status":
				return ec.fieldContext_PlanExecutionRequest_status(ctx, field)
			case "initOutput":
				return ec.fieldContext_PlanExecutionRequest_initOutput(ctx, field)
			case "planOutput":
				return ec.fieldContext_PlanExecutionRequest_planOutput(ctx, field)
			case "planFile":
				return ec.fieldContext_PlanExecutionRequest_planFile(ctx, field)
			case "planJSON":
				return ec.fieldContext_PlanExecutionRequest_planJSON(ctx, field)
			case "startedAt":
				return ec.fieldContext_PlanExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_PlanExecutionRequest_completedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanExecutionRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planExecutionRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_moduleAssignmentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleAssignmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_moduleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformDriftCheckRequest().ModuleAssignment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_planExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_planExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_planExecutionRequest(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_planExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformDriftCheckRequest().PlanExecutionRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PlanExecutionRequest)
	fc.Result = res
	return ec.marshalOPlanExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_planExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignment(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_PlanExecutionRequest_terraformVersion(ctx, field)
			case "terraformConfigurationBase64":
				return ec.fieldContext_PlanExecutionRequest_terraformConfigurationBase64(ctx, field)
			case "additionalArguments":
				return ec.fieldContext_PlanExecutionRequest_additionalArguments(ctx, field)
			case "terraformExecutionRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformExecutionRequestID(ctx, field)
			case "terraformDriftCheckRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformDriftCheckRequestID(ctx, field)
			case "status":
				return ec.fieldContext_PlanExecutionRequest_status(ctx, field)
			case "initOutput":
				return ec.fieldContext_PlanExecutionRequest_initOutput(ctx, field)
			case "planOutput":
				return ec.fieldContext_PlanExecutionRequest_planOutput(ctx, field)
			case "planFile":
				return ec.fieldContext_PlanExecutionRequest_planFile(ctx, field)
			case "planJSON":
				return ec.fieldContext_PlanExecutionRequest_planJSON(ctx, field)
			case "startedAt":
				return ec.fieldContext_PlanExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_PlanExecutionRequest_completedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanExecutionRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_syncStatus(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_syncStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TerraformDriftCheckStatus)
	fc.Result = res
	return ec.marshalNTerraformDriftCheckStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_syncStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TerraformDriftCheckStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_destroy(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_destroy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destroy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_destroy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_modulePropagationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_modulePropagation(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformDriftCheckRequest().ModulePropagation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalOModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationDriftCheckRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField, obj *models.TerraformDriftCheckRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformDriftCheckRequest().ModulePropagationDriftCheckRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationDriftCheckRequest)
	fc.Result = res
	return ec.marshalOModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformDriftCheckRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_status(ctx, field)
			case "syncStatus":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_syncStatus(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationDriftCheckRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_moduleAssignmentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModuleAssignmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint)
	fc.Result = res
	return ec.marshalNID2uint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_moduleAssignmentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_moduleAssignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformExecutionRequest().ModuleAssignment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModuleAssignment)
	fc.Result = res
	return ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_moduleAssignment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModuleAssignment_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModuleAssignment_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModuleAssignment_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModuleAssignment_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModuleAssignment_moduleGroup(ctx, field)
			case "orgAccountID":
				return ec.fieldContext_ModuleAssignment_orgAccountID(ctx, field)
			case "orgAccount":
				return ec.fieldContext_ModuleAssignment_orgAccount(ctx, field)
			case "name":
				return ec.fieldContext_ModuleAssignment_name(ctx, field)
			case "description":
				return ec.fieldContext_ModuleAssignment_description(ctx, field)
			case "remoteStateRegion":
				return ec.fieldContext_ModuleAssignment_remoteStateRegion(ctx, field)
			case "remoteStateBucket":
				return ec.fieldContext_ModuleAssignment_remoteStateBucket(ctx, field)
			case "remoteStateKey":
				return ec.fieldContext_ModuleAssignment_remoteStateKey(ctx, field)
			case "arguments":
				return ec.fieldContext_ModuleAssignment_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModuleAssignment_gcpProviderConfigurations(ctx, field)
			case "status":
				return ec.fieldContext_ModuleAssignment_status(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModuleAssignment_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModuleAssignment_modulePropagation(ctx, field)
			case "terraformDriftCheckRequests":
				return ec.fieldContext_ModuleAssignment_terraformDriftCheckRequests(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModuleAssignment_terraformExecutionRequests(ctx, field)
			case "terraformConfiguration":
				return ec.fieldContext_ModuleAssignment_terraformConfiguration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModuleAssignment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_planExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_planExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_planExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_planExecutionRequest(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_planExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformExecutionRequest().PlanExecutionRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PlanExecutionRequest)
	fc.Result = res
	return ec.marshalOPlanExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_planExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_PlanExecutionRequest_moduleAssignment(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_PlanExecutionRequest_terraformVersion(ctx, field)
			case "terraformConfigurationBase64":
				return ec.fieldContext_PlanExecutionRequest_terraformConfigurationBase64(ctx, field)
			case "additionalArguments":
				return ec.fieldContext_PlanExecutionRequest_additionalArguments(ctx, field)
			case "terraformExecutionRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformExecutionRequestID(ctx, field)
			case "terraformDriftCheckRequestID":
				return ec.fieldContext_PlanExecutionRequest_terraformDriftCheckRequestID(ctx, field)
			case "status":
				return ec.fieldContext_PlanExecutionRequest_status(ctx, field)
			case "initOutput":
				return ec.fieldContext_PlanExecutionRequest_initOutput(ctx, field)
			case "planOutput":
				return ec.fieldContext_PlanExecutionRequest_planOutput(ctx, field)
			case "planFile":
				return ec.fieldContext_PlanExecutionRequest_planFile(ctx, field)
			case "planJSON":
				return ec.fieldContext_PlanExecutionRequest_planJSON(ctx, field)
			case "startedAt":
				return ec.fieldContext_PlanExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_PlanExecutionRequest_completedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanExecutionRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_applyExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_applyExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_applyExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_applyExecutionRequest(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_applyExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformExecutionRequest().ApplyExecutionRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ApplyExecutionRequest)
	fc.Result = res
	return ec.marshalOApplyExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐApplyExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_applyExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApplyExecutionRequest_id(ctx, field)
			case "moduleAssignmentID":
				return ec.fieldContext_ApplyExecutionRequest_moduleAssignmentID(ctx, field)
			case "moduleAssignment":
				return ec.fieldContext_ApplyExecutionRequest_moduleAssignment(ctx, field)
			case "terraformVersion":
				return ec.fieldContext_ApplyExecutionRequest_terraformVersion(ctx, field)
			case "terraformConfigurationBase64":
				return ec.fieldContext_ApplyExecutionRequest_terraformConfigurationBase64(ctx, field)
			case "terraformPlanBase64":
				return ec.fieldContext_ApplyExecutionRequest_terraformPlanBase64(ctx, field)
			case "additionalArguments":
				return ec.fieldContext_ApplyExecutionRequest_additionalArguments(ctx, field)
			case "terraformExecutionRequestID":
				return ec.fieldContext_ApplyExecutionRequest_terraformExecutionRequestID(ctx, field)
			case "status":
				return ec.fieldContext_ApplyExecutionRequest_status(ctx, field)
			case "initOutput":
				return ec.fieldContext_ApplyExecutionRequest_initOutput(ctx, field)
			case "applyOutput":
				return ec.fieldContext_ApplyExecutionRequest_applyOutput(ctx, field)
			case "startedAt":
				return ec.fieldContext_ApplyExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ApplyExecutionRequest_completedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplyExecutionRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.RequestStatus)
	fc.Result = res
	return ec.marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_destroy(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_destroy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destroy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_destroy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_modulePropagationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_modulePropagationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_modulePropagation(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_modulePropagation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformExecutionRequest().ModulePropagation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagation)
	fc.Result = res
	return ec.marshalOModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_modulePropagation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagation_id(ctx, field)
			case "moduleVersionID":
				return ec.fieldContext_ModulePropagation_moduleVersionID(ctx, field)
			case "moduleVersion":
				return ec.fieldContext_ModulePropagation_moduleVersion(ctx, field)
			case "moduleGroupID":
				return ec.fieldContext_ModulePropagation_moduleGroupID(ctx, field)
			case "moduleGroup":
				return ec.fieldContext_ModulePropagation_moduleGroup(ctx, field)
			case "orgUnitID":
				return ec.fieldContext_ModulePropagation_orgUnitID(ctx, field)
			case "orgUnit":
				return ec.fieldContext_ModulePropagation_orgUnit(ctx, field)
			case "orgDimensionID":
				return ec.fieldContext_ModulePropagation_orgDimensionID(ctx, field)
			case "orgDimension":
				return ec.fieldContext_ModulePropagation_orgDimension(ctx, field)
			case "name":
				return ec.fieldContext_ModulePropagation_name(ctx, field)
			case "description":
				return ec.fieldContext_ModulePropagation_description(ctx, field)
			case "arguments":
				return ec.fieldContext_ModulePropagation_arguments(ctx, field)
			case "awsProviderConfigurations":
				return ec.fieldContext_ModulePropagation_awsProviderConfigurations(ctx, field)
			case "gcpProviderConfigurations":
				return ec.fieldContext_ModulePropagation_gcpProviderConfigurations(ctx, field)
			case "moduleAssignments":
				return ec.fieldContext_ModulePropagation_moduleAssignments(ctx, field)
			case "executionRequests":
				return ec.fieldContext_ModulePropagation_executionRequests(ctx, field)
			case "driftCheckRequests":
				return ec.fieldContext_ModulePropagation_driftCheckRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModulePropagationExecutionRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint)
	fc.Result = res
	return ec.marshalOID2ᚖuint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerraformExecutionRequest_modulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField, obj *models.TerraformExecutionRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TerraformExecutionRequest().ModulePropagationExecutionRequest(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModulePropagationExecutionRequest)
	fc.Result = res
	return ec.marshalOModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerraformExecutionRequest_modulePropagationExecutionRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerraformExecutionRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModulePropagationExecutionRequest_id(ctx, field)
			case "modulePropagationID":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagationID(ctx, field)
			case "modulePropagation":
				return ec.fieldContext_ModulePropagationExecutionRequest_modulePropagation(ctx, field)
			case "startedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_ModulePropagationExecutionRequest_completedAt(ctx, field)
			case "status":
				return ec.fieldContext_ModulePropagationExecutionRequest_status(ctx, field)
			case "terraformExecutionRequests":
				return ec.fieldContext_ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModulePropagationExecutionRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputApplyExecutionRequestFilters(ctx context.Context, obj interface{}) (models.ApplyExecutionRequestFilters, error) {
	var it models.ApplyExecutionRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "destroy", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "destroy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destroy"))
			it.Destroy, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputArgumentInput(ctx context.Context, obj interface{}) (models.ArgumentInput, error) {
	var it models.ArgumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAwsProviderConfigurationInput(ctx context.Context, obj interface{}) (models.AwsProviderConfigurationInput, error) {
	var it models.AwsProviderConfigurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"region", "alias"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "alias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			it.Alias, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGcpProviderConfigurationInput(ctx context.Context, obj interface{}) (models.GcpProviderConfigurationInput, error) {
	var it models.GcpProviderConfigurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"region", "alias"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "alias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alias"))
			it.Alias, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetadataInput(ctx context.Context, obj interface{}) (models.MetadataInput, error) {
	var it models.MetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModuleAssignmentFilters(ctx context.Context, obj interface{}) (models.ModuleAssignmentFilters, error) {
	var it models.ModuleAssignmentFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains", "descriptionContains", "status", "isPropagated"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOModuleAssignmentStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPropagated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPropagated"))
			it.IsPropagated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModuleAssignmentUpdate(ctx context.Context, obj interface{}) (models.ModuleAssignmentUpdate, error) {
	var it models.ModuleAssignmentUpdate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "moduleVersionID", "arguments", "awsProviderConfigurations", "gcpProviderConfigurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleVersionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionID"))
			it.ModuleVersionID, err = ec.unmarshalOID2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "arguments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arguments"))
			it.Arguments, err = ec.unmarshalOArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsProviderConfigurations"))
			it.AwsProviderConfigurations, err = ec.unmarshalOAwsProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gcpProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gcpProviderConfigurations"))
			it.GcpProviderConfigurations, err = ec.unmarshalOGcpProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModuleGroupFilters(ctx context.Context, obj interface{}) (models.ModuleGroupFilters, error) {
	var it models.ModuleGroupFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains", "cloudPlatform"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudPlatform"))
			it.CloudPlatform, err = ec.unmarshalOCloudPlatform2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModulePropagationDriftCheckRequestFilters(ctx context.Context, obj interface{}) (models.ModulePropagationDriftCheckRequestFilters, error) {
	var it models.ModulePropagationDriftCheckRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "status", "syncStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "syncStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("syncStatus"))
			it.SyncStatus, err = ec.unmarshalOTerraformDriftCheckStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModulePropagationExecutionRequestFilters(ctx context.Context, obj interface{}) (models.ModulePropagationExecutionRequestFilters, error) {
	var it models.ModulePropagationExecutionRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModulePropagationFilters(ctx context.Context, obj interface{}) (models.ModulePropagationFilters, error) {
	var it models.ModulePropagationFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains", "descriptionContains"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionContains"))
			it.DescriptionContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModulePropagationUpdate(ctx context.Context, obj interface{}) (models.ModulePropagationUpdate, error) {
	var it models.ModulePropagationUpdate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"orgDimensionID", "orgUnitID", "moduleVersionID", "name", "description", "arguments", "awsProviderConfigurations", "gcpProviderConfigurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "orgDimensionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimensionID"))
			it.OrgDimensionID, err = ec.unmarshalOID2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgUnitID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
			it.OrgUnitID, err = ec.unmarshalOID2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleVersionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionID"))
			it.ModuleVersionID, err = ec.unmarshalOID2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "arguments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arguments"))
			it.Arguments, err = ec.unmarshalOArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsProviderConfigurations"))
			it.AwsProviderConfigurations, err = ec.unmarshalOAwsProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gcpProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gcpProviderConfigurations"))
			it.GcpProviderConfigurations, err = ec.unmarshalOGcpProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputModuleVersionFilters(ctx context.Context, obj interface{}) (models.ModuleVersionFilters, error) {
	var it models.ModuleVersionFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains", "remoteSourceContains", "terraformVersion"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remoteSourceContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteSourceContains"))
			it.RemoteSourceContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "terraformVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terraformVersion"))
			it.TerraformVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModuleAssignment(ctx context.Context, obj interface{}) (models.NewModuleAssignment, error) {
	var it models.NewModuleAssignment
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"moduleVersionID", "moduleGroupID", "orgAccountID", "name", "description", "arguments", "awsProviderConfigurations", "gcpProviderConfigurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "moduleVersionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionID"))
			it.ModuleVersionID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGroupID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGroupID"))
			it.ModuleGroupID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgAccountID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgAccountID"))
			it.OrgAccountID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "arguments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arguments"))
			it.Arguments, err = ec.unmarshalNArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsProviderConfigurations"))
			it.AwsProviderConfigurations, err = ec.unmarshalOAwsProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gcpProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gcpProviderConfigurations"))
			it.GcpProviderConfigurations, err = ec.unmarshalOGcpProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModuleGroup(ctx context.Context, obj interface{}) (models.NewModuleGroup, error) {
	var it models.NewModuleGroup
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "cloudPlatform"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudPlatform"))
			it.CloudPlatform, err = ec.unmarshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModulePropagation(ctx context.Context, obj interface{}) (models.NewModulePropagation, error) {
	var it models.NewModulePropagation
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"moduleVersionID", "moduleGroupID", "orgUnitID", "orgDimensionID", "name", "description", "arguments", "awsProviderConfigurations", "gcpProviderConfigurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "moduleVersionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleVersionID"))
			it.ModuleVersionID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moduleGroupID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGroupID"))
			it.ModuleGroupID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgUnitID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgUnitID"))
			it.OrgUnitID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgDimensionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimensionID"))
			it.OrgDimensionID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "arguments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("arguments"))
			it.Arguments, err = ec.unmarshalNArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsProviderConfigurations"))
			it.AwsProviderConfigurations, err = ec.unmarshalOAwsProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gcpProviderConfigurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gcpProviderConfigurations"))
			it.GcpProviderConfigurations, err = ec.unmarshalOGcpProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModulePropagationDriftCheckRequest(ctx context.Context, obj interface{}) (models.NewModulePropagationDriftCheckRequest, error) {
	var it models.NewModulePropagationDriftCheckRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modulePropagationID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modulePropagationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationID"))
			it.ModulePropagationID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModulePropagationExecutionRequest(ctx context.Context, obj interface{}) (models.NewModulePropagationExecutionRequest, error) {
	var it models.NewModulePropagationExecutionRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modulePropagationID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modulePropagationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modulePropagationID"))
			it.ModulePropagationID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewModuleVersion(ctx context.Context, obj interface{}) (models.NewModuleVersion, error) {
	var it models.NewModuleVersion
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"moduleGroupId", "name", "remoteSource", "terraformVersion"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "moduleGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleGroupId"))
			it.ModuleGroupID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remoteSource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remoteSource"))
			it.RemoteSource, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "terraformVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terraformVersion"))
			it.TerraformVersion, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewOrgAccount(ctx context.Context, obj interface{}) (models.NewOrgAccount, error) {
	var it models.NewOrgAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "cloudPlatform", "cloudIdentifier", "assumeRoleName", "metadata"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudPlatform"))
			it.CloudPlatform, err = ec.unmarshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudIdentifier"))
			it.CloudIdentifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "assumeRoleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assumeRoleName"))
			it.AssumeRoleName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "metadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
			it.Metadata, err = ec.unmarshalNMetadataInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewOrgDimension(ctx context.Context, obj interface{}) (models.NewOrgDimension, error) {
	var it models.NewOrgDimension
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewOrgUnit(ctx context.Context, obj interface{}) (models.NewOrgUnit, error) {
	var it models.NewOrgUnit
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "orgDimensionID", "parentOrgUnitId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgDimensionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgDimensionID"))
			it.OrgDimensionID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrgUnitId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrgUnitId"))
			it.ParentOrgUnitID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewTerraformDriftCheckRequest(ctx context.Context, obj interface{}) (models.NewTerraformDriftCheckRequest, error) {
	var it models.NewTerraformDriftCheckRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"moduleAssignmentID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "moduleAssignmentID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignmentID"))
			it.ModuleAssignmentID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewTerraformExecutionRequest(ctx context.Context, obj interface{}) (models.NewTerraformExecutionRequest, error) {
	var it models.NewTerraformExecutionRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"moduleAssignmentID", "destroy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "moduleAssignmentID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moduleAssignmentID"))
			it.ModuleAssignmentID, err = ec.unmarshalNID2uint(ctx, v)
			if err != nil {
				return it, err
			}
		case "destroy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destroy"))
			it.Destroy, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgAccountFilters(ctx context.Context, obj interface{}) (models.OrgAccountFilters, error) {
	var it models.OrgAccountFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains", "cloudPlatform", "cloudIdentifier"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudPlatform"))
			it.CloudPlatform, err = ec.unmarshalOCloudPlatform2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudIdentifier"))
			it.CloudIdentifier, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgAccountUpdate(ctx context.Context, obj interface{}) (models.OrgAccountUpdate, error) {
	var it models.OrgAccountUpdate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "cloudPlatform", "cloudIdentifier", "assumeRoleName", "metadata"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudPlatform"))
			it.CloudPlatform, err = ec.unmarshalOCloudPlatform2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "cloudIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cloudIdentifier"))
			it.CloudIdentifier, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assumeRoleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assumeRoleName"))
			it.AssumeRoleName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "metadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
			it.Metadata, err = ec.unmarshalOMetadataInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgDimensionFilters(ctx context.Context, obj interface{}) (models.OrgDimensionFilters, error) {
	var it models.OrgDimensionFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgUnitFilters(ctx context.Context, obj interface{}) (models.OrgUnitFilters, error) {
	var it models.OrgUnitFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nameContains"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nameContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameContains"))
			it.NameContains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrgUnitUpdate(ctx context.Context, obj interface{}) (models.OrgUnitUpdate, error) {
	var it models.OrgUnitUpdate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"Name", "ParentOrgUnitID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ParentOrgUnitID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ParentOrgUnitID"))
			it.ParentOrgUnitID, err = ec.unmarshalOID2ᚖuint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanExecutionRequestFilters(ctx context.Context, obj interface{}) (models.PlanExecutionRequestFilters, error) {
	var it models.PlanExecutionRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "destroy", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "destroy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destroy"))
			it.Destroy, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTerraformDriftCheckRequestFilters(ctx context.Context, obj interface{}) (models.TerraformDriftCheckRequestFilters, error) {
	var it models.TerraformDriftCheckRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "destroy", "status", "syncStatus"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "destroy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destroy"))
			it.Destroy, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "syncStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("syncStatus"))
			it.SyncStatus, err = ec.unmarshalOTerraformDriftCheckStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTerraformExecutionRequestFilters(ctx context.Context, obj interface{}) (models.TerraformExecutionRequestFilters, error) {
	var it models.TerraformExecutionRequestFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startedBefore", "startedAfter", "completedBefore", "completedAfter", "destroy", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedBefore"))
			it.StartedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAfter"))
			it.StartedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedBefore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedBefore"))
			it.CompletedBefore, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedAfter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedAfter"))
			it.CompletedAfter, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "destroy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destroy"))
			it.Destroy, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var applyExecutionRequestImplementors = []string{"ApplyExecutionRequest"}

func (ec *executionContext) _ApplyExecutionRequest(ctx context.Context, sel ast.SelectionSet, obj *models.ApplyExecutionRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applyExecutionRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplyExecutionRequest")
		case "id":

			out.Values[i] = ec._ApplyExecutionRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignmentID":

			out.Values[i] = ec._ApplyExecutionRequest_moduleAssignmentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplyExecutionRequest_moduleAssignment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "terraformVersion":

			out.Values[i] = ec._ApplyExecutionRequest_terraformVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformConfigurationBase64":

			out.Values[i] = ec._ApplyExecutionRequest_terraformConfigurationBase64(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformPlanBase64":

			out.Values[i] = ec._ApplyExecutionRequest_terraformPlanBase64(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "additionalArguments":

			out.Values[i] = ec._ApplyExecutionRequest_additionalArguments(ctx, field, obj)

		case "terraformExecutionRequestID":

			out.Values[i] = ec._ApplyExecutionRequest_terraformExecutionRequestID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":

			out.Values[i] = ec._ApplyExecutionRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "initOutput":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplyExecutionRequest_initOutput(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "applyOutput":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ApplyExecutionRequest_applyOutput(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._ApplyExecutionRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._ApplyExecutionRequest_completedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var argumentImplementors = []string{"Argument"}

func (ec *executionContext) _Argument(ctx context.Context, sel ast.SelectionSet, obj *models.Argument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, argumentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Argument")
		case "name":

			out.Values[i] = ec._Argument_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Argument_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var awsProviderConfigurationImplementors = []string{"AwsProviderConfiguration"}

func (ec *executionContext) _AwsProviderConfiguration(ctx context.Context, sel ast.SelectionSet, obj *models.AwsProviderConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, awsProviderConfigurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AwsProviderConfiguration")
		case "region":

			out.Values[i] = ec._AwsProviderConfiguration_region(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alias":

			out.Values[i] = ec._AwsProviderConfiguration_alias(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gcpProviderConfigurationImplementors = []string{"GcpProviderConfiguration"}

func (ec *executionContext) _GcpProviderConfiguration(ctx context.Context, sel ast.SelectionSet, obj *models.GcpProviderConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gcpProviderConfigurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GcpProviderConfiguration")
		case "region":

			out.Values[i] = ec._GcpProviderConfiguration_region(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alias":

			out.Values[i] = ec._GcpProviderConfiguration_alias(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var metadataImplementors = []string{"Metadata"}

func (ec *executionContext) _Metadata(ctx context.Context, sel ast.SelectionSet, obj *models.Metadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metadataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metadata")
		case "name":

			out.Values[i] = ec._Metadata_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Metadata_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moduleAssignmentImplementors = []string{"ModuleAssignment"}

func (ec *executionContext) _ModuleAssignment(ctx context.Context, sel ast.SelectionSet, obj *models.ModuleAssignment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moduleAssignmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModuleAssignment")
		case "id":

			out.Values[i] = ec._ModuleAssignment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleVersionID":

			out.Values[i] = ec._ModuleAssignment_moduleVersionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleVersion":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_moduleVersion(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "moduleGroupID":

			out.Values[i] = ec._ModuleAssignment_moduleGroupID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleGroup":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_moduleGroup(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "orgAccountID":

			out.Values[i] = ec._ModuleAssignment_orgAccountID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_orgAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._ModuleAssignment_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._ModuleAssignment_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remoteStateRegion":

			out.Values[i] = ec._ModuleAssignment_remoteStateRegion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remoteStateBucket":

			out.Values[i] = ec._ModuleAssignment_remoteStateBucket(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remoteStateKey":

			out.Values[i] = ec._ModuleAssignment_remoteStateKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "arguments":

			out.Values[i] = ec._ModuleAssignment_arguments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "awsProviderConfigurations":

			out.Values[i] = ec._ModuleAssignment_awsProviderConfigurations(ctx, field, obj)

		case "gcpProviderConfigurations":

			out.Values[i] = ec._ModuleAssignment_gcpProviderConfigurations(ctx, field, obj)

		case "status":

			out.Values[i] = ec._ModuleAssignment_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagationID":

			out.Values[i] = ec._ModuleAssignment_modulePropagationID(ctx, field, obj)

		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_modulePropagation(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "terraformDriftCheckRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_terraformDriftCheckRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "terraformExecutionRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_terraformExecutionRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "terraformConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleAssignment_terraformConfiguration(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moduleGroupImplementors = []string{"ModuleGroup"}

func (ec *executionContext) _ModuleGroup(ctx context.Context, sel ast.SelectionSet, obj *models.ModuleGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moduleGroupImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModuleGroup")
		case "id":

			out.Values[i] = ec._ModuleGroup_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._ModuleGroup_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cloudPlatform":

			out.Values[i] = ec._ModuleGroup_cloudPlatform(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "versions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleGroup_versions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modulePropagations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleGroup_modulePropagations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "moduleAssignments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleGroup_moduleAssignments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modulePropagationImplementors = []string{"ModulePropagation"}

func (ec *executionContext) _ModulePropagation(ctx context.Context, sel ast.SelectionSet, obj *models.ModulePropagation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modulePropagationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModulePropagation")
		case "id":

			out.Values[i] = ec._ModulePropagation_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleVersionID":

			out.Values[i] = ec._ModulePropagation_moduleVersionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleVersion":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_moduleVersion(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "moduleGroupID":

			out.Values[i] = ec._ModulePropagation_moduleGroupID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleGroup":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_moduleGroup(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "orgUnitID":

			out.Values[i] = ec._ModulePropagation_orgUnitID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgUnit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_orgUnit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "orgDimensionID":

			out.Values[i] = ec._ModulePropagation_orgDimensionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgDimension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_orgDimension(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._ModulePropagation_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._ModulePropagation_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "arguments":

			out.Values[i] = ec._ModulePropagation_arguments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "awsProviderConfigurations":

			out.Values[i] = ec._ModulePropagation_awsProviderConfigurations(ctx, field, obj)

		case "gcpProviderConfigurations":

			out.Values[i] = ec._ModulePropagation_gcpProviderConfigurations(ctx, field, obj)

		case "moduleAssignments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_moduleAssignments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "executionRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_executionRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "driftCheckRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagation_driftCheckRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modulePropagationDriftCheckRequestImplementors = []string{"ModulePropagationDriftCheckRequest"}

func (ec *executionContext) _ModulePropagationDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, obj *models.ModulePropagationDriftCheckRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modulePropagationDriftCheckRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModulePropagationDriftCheckRequest")
		case "id":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagationID":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_modulePropagationID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagationDriftCheckRequest_modulePropagation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_completedAt(ctx, field, obj)

		case "status":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "syncStatus":

			out.Values[i] = ec._ModulePropagationDriftCheckRequest_syncStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformDriftCheckRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagationDriftCheckRequest_terraformDriftCheckRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modulePropagationExecutionRequestImplementors = []string{"ModulePropagationExecutionRequest"}

func (ec *executionContext) _ModulePropagationExecutionRequest(ctx context.Context, sel ast.SelectionSet, obj *models.ModulePropagationExecutionRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modulePropagationExecutionRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModulePropagationExecutionRequest")
		case "id":

			out.Values[i] = ec._ModulePropagationExecutionRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagationID":

			out.Values[i] = ec._ModulePropagationExecutionRequest_modulePropagationID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagationExecutionRequest_modulePropagation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._ModulePropagationExecutionRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._ModulePropagationExecutionRequest_completedAt(ctx, field, obj)

		case "status":

			out.Values[i] = ec._ModulePropagationExecutionRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformExecutionRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModulePropagationExecutionRequest_terraformExecutionRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moduleVariableImplementors = []string{"ModuleVariable"}

func (ec *executionContext) _ModuleVariable(ctx context.Context, sel ast.SelectionSet, obj *models.ModuleVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moduleVariableImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModuleVariable")
		case "name":

			out.Values[i] = ec._ModuleVariable_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._ModuleVariable_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._ModuleVariable_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "default":

			out.Values[i] = ec._ModuleVariable_default(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moduleVersionImplementors = []string{"ModuleVersion"}

func (ec *executionContext) _ModuleVersion(ctx context.Context, sel ast.SelectionSet, obj *models.ModuleVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moduleVersionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModuleVersion")
		case "id":

			out.Values[i] = ec._ModuleVersion_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleGroupID":

			out.Values[i] = ec._ModuleVersion_moduleGroupID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleGroup":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleVersion_moduleGroup(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._ModuleVersion_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "remoteSource":

			out.Values[i] = ec._ModuleVersion_remoteSource(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformVersion":

			out.Values[i] = ec._ModuleVersion_terraformVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "variables":

			out.Values[i] = ec._ModuleVersion_variables(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleVersion_modulePropagations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "moduleAssignments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModuleVersion_moduleAssignments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createModuleAssignment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModuleAssignment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateModuleAssignment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateModuleAssignment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createModuleGroup":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModuleGroup(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteModuleGroup":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteModuleGroup(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createModulePropagationDriftCheckRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModulePropagationDriftCheckRequest(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createModulePropagationExecutionRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModulePropagationExecutionRequest(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createModulePropagation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModulePropagation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteModulePropagation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteModulePropagation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateModulePropagation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateModulePropagation(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createModuleVersion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModuleVersion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteModuleVersion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteModuleVersion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrgAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrgAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrgAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrgAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrgAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrgDimension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrgDimension(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrgDimension":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrgDimension(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrgUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrgUnit(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrgUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrgUnit(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrgUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrgUnit(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addAccountToOrgUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addAccountToOrgUnit(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeAccountFromOrgUnit":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeAccountFromOrgUnit(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTerraformDriftCheckRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTerraformDriftCheckRequest(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTerraformExecutionRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTerraformExecutionRequest(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgAccountImplementors = []string{"OrgAccount"}

func (ec *executionContext) _OrgAccount(ctx context.Context, sel ast.SelectionSet, obj *models.OrgAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgAccount")
		case "id":

			out.Values[i] = ec._OrgAccount_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._OrgAccount_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cloudPlatform":

			out.Values[i] = ec._OrgAccount_cloudPlatform(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cloudIdentifier":

			out.Values[i] = ec._OrgAccount_cloudIdentifier(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "assumeRoleName":

			out.Values[i] = ec._OrgAccount_assumeRoleName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgUnits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgAccount_orgUnits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "metadata":

			out.Values[i] = ec._OrgAccount_metadata(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgAccount_moduleAssignments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgDimensionImplementors = []string{"OrgDimension"}

func (ec *executionContext) _OrgDimension(ctx context.Context, sel ast.SelectionSet, obj *models.OrgDimension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgDimensionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgDimension")
		case "id":

			out.Values[i] = ec._OrgDimension_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._OrgDimension_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rootOrgUnit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgDimension_rootOrgUnit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "orgUnits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgDimension_orgUnits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modulePropagations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgDimension_modulePropagations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgUnitImplementors = []string{"OrgUnit"}

func (ec *executionContext) _OrgUnit(ctx context.Context, sel ast.SelectionSet, obj *models.OrgUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgUnitImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgUnit")
		case "id":

			out.Values[i] = ec._OrgUnit_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._OrgUnit_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgDimensionID":

			out.Values[i] = ec._OrgUnit_orgDimensionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "orgDimension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_orgDimension(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "hierarchy":

			out.Values[i] = ec._OrgUnit_hierarchy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "parentOrgUnitID":

			out.Values[i] = ec._OrgUnit_parentOrgUnitID(ctx, field, obj)

		case "parentOrgUnit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_parentOrgUnit(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "children":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_children(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "downstreamOrgUnits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_downstreamOrgUnits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "upstreamOrgUnits":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_upstreamOrgUnits(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "orgAccounts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_orgAccounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modulePropagations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrgUnit_modulePropagations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planExecutionRequestImplementors = []string{"PlanExecutionRequest"}

func (ec *executionContext) _PlanExecutionRequest(ctx context.Context, sel ast.SelectionSet, obj *models.PlanExecutionRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planExecutionRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanExecutionRequest")
		case "id":

			out.Values[i] = ec._PlanExecutionRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignmentID":

			out.Values[i] = ec._PlanExecutionRequest_moduleAssignmentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanExecutionRequest_moduleAssignment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "terraformVersion":

			out.Values[i] = ec._PlanExecutionRequest_terraformVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "terraformConfigurationBase64":

			out.Values[i] = ec._PlanExecutionRequest_terraformConfigurationBase64(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "additionalArguments":

			out.Values[i] = ec._PlanExecutionRequest_additionalArguments(ctx, field, obj)

		case "terraformExecutionRequestID":

			out.Values[i] = ec._PlanExecutionRequest_terraformExecutionRequestID(ctx, field, obj)

		case "terraformDriftCheckRequestID":

			out.Values[i] = ec._PlanExecutionRequest_terraformDriftCheckRequestID(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanExecutionRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "initOutput":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanExecutionRequest_initOutput(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "planOutput":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanExecutionRequest_planOutput(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "planFile":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanExecutionRequest_planFile(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "planJSON":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanExecutionRequest_planJSON(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._PlanExecutionRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._PlanExecutionRequest_completedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "applyExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_applyExecutionRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleAssignment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleAssignment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleAssignments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleAssignments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleGroup":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleGroups":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagationDriftCheckRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagationDriftCheckRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagationDriftCheckRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagationDriftCheckRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagationExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagationExecutionRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagationExecutionRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagationExecutionRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modulePropagations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modulePropagations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleVersion":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleVersion(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "moduleVersions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_moduleVersions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orgAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orgAccounts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgAccounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orgDimension":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgDimension(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orgDimensions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgDimensions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "orgUnit":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orgUnit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planExecutionRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var terraformDriftCheckRequestImplementors = []string{"TerraformDriftCheckRequest"}

func (ec *executionContext) _TerraformDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, obj *models.TerraformDriftCheckRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terraformDriftCheckRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TerraformDriftCheckRequest")
		case "id":

			out.Values[i] = ec._TerraformDriftCheckRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignmentID":

			out.Values[i] = ec._TerraformDriftCheckRequest_moduleAssignmentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformDriftCheckRequest_moduleAssignment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "planExecutionRequestID":

			out.Values[i] = ec._TerraformDriftCheckRequest_planExecutionRequestID(ctx, field, obj)

		case "planExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformDriftCheckRequest_planExecutionRequest(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._TerraformDriftCheckRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._TerraformDriftCheckRequest_completedAt(ctx, field, obj)

		case "status":

			out.Values[i] = ec._TerraformDriftCheckRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "syncStatus":

			out.Values[i] = ec._TerraformDriftCheckRequest_syncStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "destroy":

			out.Values[i] = ec._TerraformDriftCheckRequest_destroy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagationID":

			out.Values[i] = ec._TerraformDriftCheckRequest_modulePropagationID(ctx, field, obj)

		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformDriftCheckRequest_modulePropagation(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modulePropagationDriftCheckRequestID":

			out.Values[i] = ec._TerraformDriftCheckRequest_modulePropagationDriftCheckRequestID(ctx, field, obj)

		case "modulePropagationDriftCheckRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformDriftCheckRequest_modulePropagationDriftCheckRequest(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var terraformExecutionRequestImplementors = []string{"TerraformExecutionRequest"}

func (ec *executionContext) _TerraformExecutionRequest(ctx context.Context, sel ast.SelectionSet, obj *models.TerraformExecutionRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terraformExecutionRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TerraformExecutionRequest")
		case "id":

			out.Values[i] = ec._TerraformExecutionRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignmentID":

			out.Values[i] = ec._TerraformExecutionRequest_moduleAssignmentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "moduleAssignment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformExecutionRequest_moduleAssignment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "planExecutionRequestID":

			out.Values[i] = ec._TerraformExecutionRequest_planExecutionRequestID(ctx, field, obj)

		case "planExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformExecutionRequest_planExecutionRequest(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "applyExecutionRequestID":

			out.Values[i] = ec._TerraformExecutionRequest_applyExecutionRequestID(ctx, field, obj)

		case "applyExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformExecutionRequest_applyExecutionRequest(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "startedAt":

			out.Values[i] = ec._TerraformExecutionRequest_startedAt(ctx, field, obj)

		case "completedAt":

			out.Values[i] = ec._TerraformExecutionRequest_completedAt(ctx, field, obj)

		case "status":

			out.Values[i] = ec._TerraformExecutionRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "destroy":

			out.Values[i] = ec._TerraformExecutionRequest_destroy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modulePropagationID":

			out.Values[i] = ec._TerraformExecutionRequest_modulePropagationID(ctx, field, obj)

		case "modulePropagation":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformExecutionRequest_modulePropagation(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modulePropagationExecutionRequestID":

			out.Values[i] = ec._TerraformExecutionRequest_modulePropagationExecutionRequestID(ctx, field, obj)

		case "modulePropagationExecutionRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TerraformExecutionRequest_modulePropagationExecutionRequest(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNApplyExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐApplyExecutionRequest(ctx context.Context, sel ast.SelectionSet, v models.ApplyExecutionRequest) graphql.Marshaler {
	return ec._ApplyExecutionRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplyExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐApplyExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.ApplyExecutionRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApplyExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNArgument2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgument(ctx context.Context, sel ast.SelectionSet, v models.Argument) graphql.Marshaler {
	return ec._Argument(ctx, sel, &v)
}

func (ec *executionContext) marshalNArgument2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Argument) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArgument2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNArgumentInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInput(ctx context.Context, v interface{}) (models.ArgumentInput, error) {
	res, err := ec.unmarshalInputArgumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx context.Context, v interface{}) ([]models.ArgumentInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ArgumentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArgumentInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAwsProviderConfiguration2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfiguration(ctx context.Context, sel ast.SelectionSet, v models.AwsProviderConfiguration) graphql.Marshaler {
	return ec._AwsProviderConfiguration(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNAwsProviderConfigurationInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInput(ctx context.Context, v interface{}) (models.AwsProviderConfigurationInput, error) {
	res, err := ec.unmarshalInputAwsProviderConfigurationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx context.Context, v interface{}) (models.CloudPlatform, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.CloudPlatform(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCloudPlatform2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx context.Context, sel ast.SelectionSet, v models.CloudPlatform) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNGcpProviderConfiguration2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfiguration(ctx context.Context, sel ast.SelectionSet, v models.GcpProviderConfiguration) graphql.Marshaler {
	return ec._GcpProviderConfiguration(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNGcpProviderConfigurationInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInput(ctx context.Context, v interface{}) (models.GcpProviderConfigurationInput, error) {
	res, err := ec.unmarshalInputGcpProviderConfigurationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2uint(ctx context.Context, v interface{}) (uint, error) {
	res, err := graphql.UnmarshalUint(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2uint(ctx context.Context, sel ast.SelectionSet, v uint) graphql.Marshaler {
	res := graphql.MarshalUint(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMetadata2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadata(ctx context.Context, sel ast.SelectionSet, v models.Metadata) graphql.Marshaler {
	return ec._Metadata(ctx, sel, &v)
}

func (ec *executionContext) marshalNMetadata2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Metadata) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetadata2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadata(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNMetadataInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInput(ctx context.Context, v interface{}) (models.MetadataInput, error) {
	res, err := ec.unmarshalInputMetadataInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMetadataInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInputᚄ(ctx context.Context, v interface{}) ([]models.MetadataInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.MetadataInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMetadataInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNModuleAssignment2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx context.Context, sel ast.SelectionSet, v models.ModuleAssignment) graphql.Marshaler {
	return ec._ModuleAssignment(ctx, sel, &v)
}

func (ec *executionContext) marshalNModuleAssignment2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModuleAssignment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModuleAssignment2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignment(ctx context.Context, sel ast.SelectionSet, v *models.ModuleAssignment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModuleAssignment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNModuleAssignmentStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx context.Context, v interface{}) (models.ModuleAssignmentStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModuleAssignmentStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModuleAssignmentStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx context.Context, sel ast.SelectionSet, v models.ModuleAssignmentStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNModuleAssignmentUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentUpdate(ctx context.Context, v interface{}) (models.ModuleAssignmentUpdate, error) {
	res, err := ec.unmarshalInputModuleAssignmentUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModuleGroup2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx context.Context, sel ast.SelectionSet, v models.ModuleGroup) graphql.Marshaler {
	return ec._ModuleGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNModuleGroup2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModuleGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModuleGroup2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroup(ctx context.Context, sel ast.SelectionSet, v *models.ModuleGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModuleGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNModulePropagation2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx context.Context, sel ast.SelectionSet, v models.ModulePropagation) graphql.Marshaler {
	return ec._ModulePropagation(ctx, sel, &v)
}

func (ec *executionContext) marshalNModulePropagation2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModulePropagation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModulePropagation(ctx, sel, v)
}

func (ec *executionContext) marshalNModulePropagationDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, v models.ModulePropagationDriftCheckRequest) graphql.Marshaler {
	return ec._ModulePropagationDriftCheckRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNModulePropagationDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModulePropagationDriftCheckRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagationDriftCheckRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModulePropagationDriftCheckRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNModulePropagationExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx context.Context, sel ast.SelectionSet, v models.ModulePropagationExecutionRequest) graphql.Marshaler {
	return ec._ModulePropagationExecutionRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNModulePropagationExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModulePropagationExecutionRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagationExecutionRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModulePropagationExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNModulePropagationUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationUpdate(ctx context.Context, v interface{}) (models.ModulePropagationUpdate, error) {
	res, err := ec.unmarshalInputModulePropagationUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModuleVariable2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModuleVariable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModuleVariable2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModuleVariable2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVariable(ctx context.Context, sel ast.SelectionSet, v *models.ModuleVariable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModuleVariable(ctx, sel, v)
}

func (ec *executionContext) marshalNModuleVersion2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx context.Context, sel ast.SelectionSet, v models.ModuleVersion) graphql.Marshaler {
	return ec._ModuleVersion(ctx, sel, &v)
}

func (ec *executionContext) marshalNModuleVersion2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModuleVersion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModuleVersion2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersion(ctx context.Context, sel ast.SelectionSet, v *models.ModuleVersion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModuleVersion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewModuleAssignment2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleAssignment(ctx context.Context, v interface{}) (models.NewModuleAssignment, error) {
	res, err := ec.unmarshalInputNewModuleAssignment(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewModuleGroup2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleGroup(ctx context.Context, v interface{}) (models.NewModuleGroup, error) {
	res, err := ec.unmarshalInputNewModuleGroup(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewModulePropagation2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagation(ctx context.Context, v interface{}) (models.NewModulePropagation, error) {
	res, err := ec.unmarshalInputNewModulePropagation(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewModulePropagationDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagationDriftCheckRequest(ctx context.Context, v interface{}) (models.NewModulePropagationDriftCheckRequest, error) {
	res, err := ec.unmarshalInputNewModulePropagationDriftCheckRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewModulePropagationExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModulePropagationExecutionRequest(ctx context.Context, v interface{}) (models.NewModulePropagationExecutionRequest, error) {
	res, err := ec.unmarshalInputNewModulePropagationExecutionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewModuleVersion2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewModuleVersion(ctx context.Context, v interface{}) (models.NewModuleVersion, error) {
	res, err := ec.unmarshalInputNewModuleVersion(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewOrgAccount2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgAccount(ctx context.Context, v interface{}) (models.NewOrgAccount, error) {
	res, err := ec.unmarshalInputNewOrgAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewOrgDimension2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgDimension(ctx context.Context, v interface{}) (models.NewOrgDimension, error) {
	res, err := ec.unmarshalInputNewOrgDimension(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewOrgUnit2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewOrgUnit(ctx context.Context, v interface{}) (models.NewOrgUnit, error) {
	res, err := ec.unmarshalInputNewOrgUnit(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewTerraformDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewTerraformDriftCheckRequest(ctx context.Context, v interface{}) (models.NewTerraformDriftCheckRequest, error) {
	res, err := ec.unmarshalInputNewTerraformDriftCheckRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewTerraformExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐNewTerraformExecutionRequest(ctx context.Context, v interface{}) (models.NewTerraformExecutionRequest, error) {
	res, err := ec.unmarshalInputNewTerraformExecutionRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrgAccount2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx context.Context, sel ast.SelectionSet, v models.OrgAccount) graphql.Marshaler {
	return ec._OrgAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgAccount2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrgAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrgAccount2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccount(ctx context.Context, sel ast.SelectionSet, v *models.OrgAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrgAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrgAccountUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountUpdate(ctx context.Context, v interface{}) (models.OrgAccountUpdate, error) {
	res, err := ec.unmarshalInputOrgAccountUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrgDimension2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx context.Context, sel ast.SelectionSet, v models.OrgDimension) graphql.Marshaler {
	return ec._OrgDimension(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgDimension2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimensionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrgDimension) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrgDimension2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimension(ctx context.Context, sel ast.SelectionSet, v *models.OrgDimension) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrgDimension(ctx, sel, v)
}

func (ec *executionContext) marshalNOrgUnit2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx context.Context, sel ast.SelectionSet, v models.OrgUnit) graphql.Marshaler {
	return ec._OrgUnit(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrgUnit2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OrgUnit) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx context.Context, sel ast.SelectionSet, v *models.OrgUnit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrgUnit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrgUnitUpdate2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitUpdate(ctx context.Context, v interface{}) (models.OrgUnitUpdate, error) {
	res, err := ec.unmarshalInputOrgUnitUpdate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx context.Context, sel ast.SelectionSet, v models.PlanExecutionRequest) graphql.Marshaler {
	return ec._PlanExecutionRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.PlanExecutionRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx context.Context, v interface{}) (models.RequestStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.RequestStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRequestStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx context.Context, sel ast.SelectionSet, v models.RequestStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTerraformDriftCheckRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, v models.TerraformDriftCheckRequest) graphql.Marshaler {
	return ec._TerraformDriftCheckRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNTerraformDriftCheckRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TerraformDriftCheckRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTerraformDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTerraformDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, v *models.TerraformDriftCheckRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TerraformDriftCheckRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTerraformDriftCheckStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx context.Context, v interface{}) (models.TerraformDriftCheckStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TerraformDriftCheckStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTerraformDriftCheckStatus2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx context.Context, sel ast.SelectionSet, v models.TerraformDriftCheckStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTerraformExecutionRequest2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequest(ctx context.Context, sel ast.SelectionSet, v models.TerraformExecutionRequest) graphql.Marshaler {
	return ec._TerraformExecutionRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNTerraformExecutionRequest2ᚕᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TerraformExecutionRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTerraformExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTerraformExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.TerraformExecutionRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TerraformExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOApplyExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐApplyExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.ApplyExecutionRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplyExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOArgumentInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInputᚄ(ctx context.Context, v interface{}) ([]models.ArgumentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ArgumentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNArgumentInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐArgumentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAwsProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationᚄ(ctx context.Context, sel ast.SelectionSet, v []models.AwsProviderConfiguration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAwsProviderConfiguration2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfiguration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAwsProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInputᚄ(ctx context.Context, v interface{}) ([]models.AwsProviderConfigurationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.AwsProviderConfigurationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAwsProviderConfigurationInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐAwsProviderConfigurationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCloudPlatform2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx context.Context, v interface{}) (*models.CloudPlatform, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.CloudPlatform(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCloudPlatform2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐCloudPlatform(ctx context.Context, sel ast.SelectionSet, v *models.CloudPlatform) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOGcpProviderConfiguration2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationᚄ(ctx context.Context, sel ast.SelectionSet, v []models.GcpProviderConfiguration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcpProviderConfiguration2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfiguration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGcpProviderConfigurationInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInputᚄ(ctx context.Context, v interface{}) ([]models.GcpProviderConfigurationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.GcpProviderConfigurationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcpProviderConfigurationInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐGcpProviderConfigurationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOID2ᚖuint(ctx context.Context, v interface{}) (*uint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖuint(ctx context.Context, sel ast.SelectionSet, v *uint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUint(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOMetadataInput2ᚕgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInputᚄ(ctx context.Context, v interface{}) ([]models.MetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.MetadataInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMetadataInput2githubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐMetadataInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOModuleAssignmentFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentFilters(ctx context.Context, v interface{}) (*models.ModuleAssignmentFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModuleAssignmentFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOModuleAssignmentStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx context.Context, v interface{}) (*models.ModuleAssignmentStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModuleAssignmentStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModuleAssignmentStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleAssignmentStatus(ctx context.Context, sel ast.SelectionSet, v *models.ModuleAssignmentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOModuleGroupFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleGroupFilters(ctx context.Context, v interface{}) (*models.ModuleGroupFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModuleGroupFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModulePropagation2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagation(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModulePropagation(ctx, sel, v)
}

func (ec *executionContext) marshalOModulePropagationDriftCheckRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequest(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagationDriftCheckRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModulePropagationDriftCheckRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOModulePropagationDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationDriftCheckRequestFilters(ctx context.Context, v interface{}) (*models.ModulePropagationDriftCheckRequestFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModulePropagationDriftCheckRequestFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModulePropagationExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.ModulePropagationExecutionRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModulePropagationExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOModulePropagationExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationExecutionRequestFilters(ctx context.Context, v interface{}) (*models.ModulePropagationExecutionRequestFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModulePropagationExecutionRequestFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOModulePropagationFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModulePropagationFilters(ctx context.Context, v interface{}) (*models.ModulePropagationFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModulePropagationFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOModuleVersionFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐModuleVersionFilters(ctx context.Context, v interface{}) (*models.ModuleVersionFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputModuleVersionFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrgAccountFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgAccountFilters(ctx context.Context, v interface{}) (*models.OrgAccountFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgAccountFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrgDimensionFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgDimensionFilters(ctx context.Context, v interface{}) (*models.OrgDimensionFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgDimensionFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrgUnit2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnit(ctx context.Context, sel ast.SelectionSet, v *models.OrgUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgUnit(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrgUnitFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐOrgUnitFilters(ctx context.Context, v interface{}) (*models.OrgUnitFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrgUnitFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlanExecutionRequest2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐPlanExecutionRequest(ctx context.Context, sel ast.SelectionSet, v *models.PlanExecutionRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlanExecutionRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx context.Context, v interface{}) (*models.RequestStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.RequestStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORequestStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐRequestStatus(ctx context.Context, sel ast.SelectionSet, v *models.RequestStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTerraformDriftCheckRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckRequestFilters(ctx context.Context, v interface{}) (*models.TerraformDriftCheckRequestFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTerraformDriftCheckRequestFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTerraformDriftCheckStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx context.Context, v interface{}) (*models.TerraformDriftCheckStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TerraformDriftCheckStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTerraformDriftCheckStatus2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformDriftCheckStatus(ctx context.Context, sel ast.SelectionSet, v *models.TerraformDriftCheckStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTerraformExecutionRequestFilters2ᚖgithubᚗcomᚋsheacloudᚋtfomᚋpkgᚋmodelsᚐTerraformExecutionRequestFilters(ctx context.Context, v interface{}) (*models.TerraformExecutionRequestFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTerraformExecutionRequestFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
