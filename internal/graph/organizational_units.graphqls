type OrgUnit {
  id: ID!
  name: String!
  orgDimensionID: ID!
  orgDimension: OrgDimension!
  hierarchy: String!
  parentOrgUnitID: ID
  parentOrgUnit: OrgUnit
  children(filters: OrgUnitFilters, limit: Int, offset: Int): [OrgUnit!]!
  downstreamOrgUnits(
    filters: OrgUnitFilters
    limit: Int
    offset: Int
  ): [OrgUnit!]!
  upstreamOrgUnits(
    filters: OrgUnitFilters
    limit: Int
    offset: Int
  ): [OrgUnit!]!
  orgAccounts(
    filters: OrgAccountFilters
    limit: Int
    offset: Int
  ): [OrgAccount!]!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
}

input OrgUnitUpdate {
  Name: String
  ParentOrgUnitID: ID
}

input NewOrgUnit {
  name: String!
  orgDimensionID: ID!
  parentOrgUnitId: ID!
}

input OrgUnitFilters {
  nameContains: String
}

extend type Query {
  orgUnit(orgUnitID: ID!): OrgUnit!
}

extend type Mutation {
  createOrgUnit(orgUnit: NewOrgUnit!): OrgUnit!
  deleteOrgUnit(orgUnitID: ID!): Boolean!
  updateOrgUnit(orgUnitID: ID!, update: OrgUnitUpdate!): OrgUnit!
  addAccountToOrgUnit(orgUnitID: ID!, orgAccountID: ID!): Boolean!
  removeAccountFromOrgUnit(orgUnitID: ID!, orgAccountID: ID!): Boolean!
}
