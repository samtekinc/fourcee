type ModulePropagation {
  modulePropagationId: ID!
  moduleVersionId: ID!
  moduleVersion: ModuleVersion!
  moduleGroupId: ID!
  moduleGroup: ModuleGroup!
  orgUnitId: ID!
  orgUnit: OrganizationalUnit!
  orgDimensionId: ID!
  orgDimension: OrganizationalDimension!
  name: String!
  description: String!
  arguments: [Argument!]!
  awsProviderConfigurations: [AwsProviderConfiguration!]!
  moduleAccountAssociations(
    limit: Int
    nextCursor: String
  ): ModuleAccountAssociations!
  executionRequests(
    limit: Int
    nextCursor: String
  ): ModulePropagationExecutionRequests!
}

type AwsProviderConfiguration {
  region: String!
  alias: String!
}

type Argument {
  name: String!
  value: String!
}

type ModulePropagations {
  items: [ModulePropagation]!
  nextCursor: String
}

input NewModulePropagation {
  moduleVersionId: ID!
  moduleGroupId: ID!
  orgUnitId: ID!
  orgDimensionId: ID!
  name: String!
  description: String!
  arguments: [ArgumentInput!]!
  awsProviderConfigurations: [AwsProviderConfigurationInput!]!
}

input AwsProviderConfigurationInput {
  region: String!
  alias: String!
}

input ModulePropagationUpdate {
  orgDimensionId: ID
  orgUnitId: ID
  name: String
  description: String
  arguments: [ArgumentInput!]
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
}

input ArgumentInput {
  name: String!
  value: String!
}

extend type Query {
  modulePropagation(modulePropagationId: ID!): ModulePropagation!
  modulePropagations(limit: Int, nextCursor: String): ModulePropagations!
}

extend type Mutation {
  createModulePropagation(
    modulePropagation: NewModulePropagation!
  ): ModulePropagation!
  deleteModulePropagation(modulePropagationId: ID!): Boolean!
  updateModulePropagation(
    modulePropagationId: ID!
    update: ModulePropagationUpdate!
  ): ModulePropagation!
}
