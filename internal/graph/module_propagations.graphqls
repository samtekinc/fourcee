type ModulePropagation {
  id: ID!
  moduleVersionID: ID!
  moduleVersion: ModuleVersion!
  moduleGroupID: ID!
  moduleGroup: ModuleGroup!
  orgUnitID: ID!
  orgUnit: OrgUnit!
  orgDimensionID: ID!
  orgDimension: OrgDimension!
  name: String!
  description: String!
  arguments: [Argument!]!
  awsProviderConfigurations: [AwsProviderConfiguration!]
  gcpProviderConfigurations: [GcpProviderConfiguration!]
  moduleAssignments(
    filters: ModuleAssignmentFilters
    limit: Int
    offset: Int
  ): [ModuleAssignment!]!
  executionRequests(
    filters: ModulePropagationExecutionRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationExecutionRequest!]!
  driftCheckRequests(
    filters: ModulePropagationDriftCheckRequestFilters
    limit: Int
    offset: Int
  ): [ModulePropagationDriftCheckRequest!]!
}

type AwsProviderConfiguration {
  region: String!
  alias: String
}

type GcpProviderConfiguration {
  region: String!
  alias: String
}

type Argument {
  name: String!
  value: String!
}

input NewModulePropagation {
  moduleVersionID: ID!
  moduleGroupID: ID!
  orgUnitID: ID!
  orgDimensionID: ID!
  name: String!
  description: String!
  arguments: [ArgumentInput!]!
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input AwsProviderConfigurationInput {
  region: String!
  alias: String
}

input GcpProviderConfigurationInput {
  region: String!
  alias: String
}

input ModulePropagationUpdate {
  orgDimensionID: ID
  orgUnitID: ID
  moduleVersionID: ID
  name: String
  description: String
  arguments: [ArgumentInput!]
  awsProviderConfigurations: [AwsProviderConfigurationInput!]
  gcpProviderConfigurations: [GcpProviderConfigurationInput!]
}

input ArgumentInput {
  name: String!
  value: String!
}

input ModulePropagationFilters {
  nameContains: String
  descriptionContains: String
}

extend type Query {
  modulePropagation(modulePropagationID: ID!): ModulePropagation!
  modulePropagations(
    filters: ModulePropagationFilters
    limit: Int
    offset: Int
  ): [ModulePropagation!]!
}

extend type Mutation {
  createModulePropagation(
    modulePropagation: NewModulePropagation!
  ): ModulePropagation!
  deleteModulePropagation(modulePropagationID: ID!): Boolean!
  updateModulePropagation(
    modulePropagationID: ID!
    update: ModulePropagationUpdate!
  ): ModulePropagation!
}
