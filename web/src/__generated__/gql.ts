/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query applyExecutionRequest($applyExecutionRequestId: ID!) {\n    applyExecutionRequest(\n      applyExecutionRequestId: $applyExecutionRequestId\n      withOutputs: true\n    ) {\n      applyExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      applyOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n": types.ApplyExecutionRequestDocument,
    "\n  mutation deleteOrganizationalUnitMembership(\n    $orgDimensionId: ID!\n    $orgAccountId: ID!\n  ) {\n    deleteOrganizationalUnitMembership(\n      orgDimensionId: $orgDimensionId\n      orgAccountId: $orgAccountId\n    )\n  }\n": types.DeleteOrganizationalUnitMembershipDocument,
    "\n  query moduleAssignment($moduleAssignmentId: ID!) {\n    moduleAssignment(moduleAssignmentId: $moduleAssignmentId) {\n      name\n      modulePropagation {\n        modulePropagationId\n        name\n      }\n      orgAccount {\n        orgAccountId\n        name\n        cloudPlatform\n      }\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      status\n      terraformConfiguration\n      terraformExecutionRequests(limit: 5) {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n      terraformDriftCheckRequests(limit: 5) {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n": types.ModuleAssignmentDocument,
    "\n  query moduleGroups {\n    moduleGroups(limit: 100) {\n      items {\n        moduleGroupId\n        name\n        versions {\n          items {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n": types.ModuleGroupsDocument,
    "\n  query moduleGroup($moduleGroupId: ID!) {\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      moduleGroupId\n      name\n      versions {\n        items {\n          moduleVersionId\n          name\n          remoteSource\n          terraformVersion\n        }\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n          }\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n": types.ModuleGroupDocument,
    "\n  query modulePropagationDriftCheckRequest(\n    $modulePropagationId: ID!\n    $modulePropagationDriftCheckRequestId: ID!\n  ) {\n    modulePropagationDriftCheckRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationDriftCheckRequestId: $modulePropagationDriftCheckRequestId\n    ) {\n      modulePropagationId\n      modulePropagationDriftCheckRequestId\n      requestTime\n      status\n      terraformDriftCheckRequests {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n": types.ModulePropagationDriftCheckRequestDocument,
    "\n  query modulePropagationExecutionRequest(\n    $modulePropagationId: ID!\n    $modulePropagationExecutionRequestId: ID!\n  ) {\n    modulePropagationExecutionRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationExecutionRequestId: $modulePropagationExecutionRequestId\n    ) {\n      modulePropagationId\n      modulePropagationExecutionRequestId\n      requestTime\n      status\n      terraformExecutionRequests {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n    }\n  }\n": types.ModulePropagationExecutionRequestDocument,
    "\n  query modulePropagation($modulePropagationId: ID!) {\n    modulePropagation(modulePropagationId: $modulePropagationId) {\n      modulePropagationId\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      orgUnitId\n      orgUnit {\n        orgUnitId\n        orgDimensionId\n        name\n        downstreamOrgUnits {\n          items {\n            orgUnitId\n            orgDimensionId\n            name\n          }\n        }\n      }\n      modulePropagationId\n      name\n      description\n      executionRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationExecutionRequestId\n          requestTime\n          status\n        }\n      }\n      driftCheckRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationDriftCheckRequestId\n          requestTime\n          status\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          modulePropagationId\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n": types.ModulePropagationDocument,
    "\n  query modulePropagationUpdateOptions($moduleGroupId: ID!) {\n    organizationalDimensions(limit: 10000) {\n      items {\n        orgDimensionId\n        name\n        orgUnits(limit: 10000) {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      versions {\n        items {\n          moduleVersionId\n          name\n        }\n      }\n    }\n  }\n": types.ModulePropagationUpdateOptionsDocument,
    "\n  mutation updateModulePropagation(\n    $modulePropagationId: ID!\n    $update: ModulePropagationUpdate!\n  ) {\n    updateModulePropagation(\n      modulePropagationId: $modulePropagationId\n      update: $update\n    ) {\n      modulePropagationId\n    }\n  }\n": types.UpdateModulePropagationDocument,
    "\n  query modulePropagations {\n    modulePropagations(limit: 100) {\n      items {\n        modulePropagationId\n        name\n        moduleGroup {\n          moduleGroupId\n          name\n          cloudPlatform\n        }\n        moduleVersion {\n          moduleVersionId\n          name\n        }\n        orgUnit {\n          orgUnitId\n          name\n        }\n        orgDimension {\n          orgDimensionId\n          name\n        }\n      }\n    }\n  }\n": types.ModulePropagationsDocument,
    "\n  query moduleVersion($moduleGroupId: ID!, $moduleVersionId: ID!) {\n    moduleVersion(\n      moduleGroupId: $moduleGroupId\n      moduleVersionId: $moduleVersionId\n    ) {\n      moduleVersionId\n      name\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      remoteSource\n      terraformVersion\n      variables {\n        name\n        type\n        description\n        default\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n    }\n  }\n": types.ModuleVersionDocument,
    "\n  mutation createModuleGroup($moduleGroup: NewModuleGroup!) {\n    createModuleGroup(moduleGroup: $moduleGroup) {\n      moduleGroupId\n    }\n  }\n": types.CreateModuleGroupDocument,
    "\n  mutation createModulePropagation($modulePropagation: NewModulePropagation!) {\n    createModulePropagation(modulePropagation: $modulePropagation) {\n      modulePropagationId\n    }\n  }\n": types.CreateModulePropagationDocument,
    "\n  query modulePropagationOptions {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroups {\n      items {\n        moduleGroupId\n        name\n        cloudPlatform\n        versions {\n          items {\n            moduleVersionId\n            name\n            variables {\n              name\n              type\n              default\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ModulePropagationOptionsDocument,
    "\n  mutation createModuleVersion($moduleVersion: NewModuleVersion!) {\n    createModuleVersion(moduleVersion: $moduleVersion) {\n      moduleVersionId\n    }\n  }\n": types.CreateModuleVersionDocument,
    "\n  mutation createOrganizationalAccount($orgAccount: NewOrganizationalAccount!) {\n    createOrganizationalAccount(orgAccount: $orgAccount) {\n      orgAccountId\n    }\n  }\n": types.CreateOrganizationalAccountDocument,
    "\n  mutation createOrganizationalDimension(\n    $orgDimension: NewOrganizationalDimension!\n  ) {\n    createOrganizationalDimension(orgDimension: $orgDimension) {\n      orgDimensionId\n    }\n  }\n": types.CreateOrganizationalDimensionDocument,
    "\n  mutation createOrganizationalUnit($orgUnit: NewOrganizationalUnit!) {\n    createOrganizationalUnit(orgUnit: $orgUnit) {\n      orgUnitId\n    }\n  }\n": types.CreateOrganizationalUnitDocument,
    "\n  mutation createOrganizationalUnitMembership(\n    $orgUnitMembership: NewOrganizationalUnitMembership!\n  ) {\n    createOrganizationalUnitMembership(orgUnitMembership: $orgUnitMembership) {\n      orgUnitId\n    }\n  }\n": types.CreateOrganizationalUnitMembershipDocument,
    "\n  query organizationalDimensionsAndUnits {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationalDimensionsAndUnitsDocument,
    "\n  query organizationalAccountsAndMemberships {\n    organizationalAccounts {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n        orgUnitMemberships {\n          items {\n            orgDimensionId\n            orgUnitId\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationalAccountsAndMembershipsDocument,
    "\n  query organizationalAccount($orgAccountId: ID!) {\n    organizationalAccount(orgAccountId: $orgAccountId) {\n      orgAccountId\n      name\n      cloudPlatform\n      cloudIdentifier\n      orgUnitMemberships {\n        items {\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          status\n          modulePropagationId\n          orgAccountId\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n            orgUnit {\n              orgUnitId\n              name\n            }\n            orgDimension {\n              orgDimensionId\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationalAccountDocument,
    "\n  query organizationalAccounts {\n    organizationalAccounts(limit: 100) {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n      }\n    }\n  }\n": types.OrganizationalAccountsDocument,
    "\n  query organizationalDimension($orgDimensionId: ID!) {\n    organizationalDimension(orgDimensionId: $orgDimensionId) {\n      orgDimensionId\n      name\n      rootOrgUnitId\n      orgUnits {\n        items {\n          orgUnitId\n          name\n          parentOrgUnitId\n          hierarchy\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          moduleGroupId\n          moduleVersionId\n          orgUnitId\n          orgDimensionId\n          name\n          description\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationalDimensionDocument,
    "\n  query organizationalDimensions {\n    organizationalDimensions(limit: 100) {\n      items {\n        orgDimensionId\n        name\n      }\n    }\n  }\n": types.OrganizationalDimensionsDocument,
    "\n  query organizationalUnit($orgUnitId: ID!, $orgDimensionId: ID!) {\n    organizationalUnit(orgDimensionId: $orgDimensionId, orgUnitId: $orgUnitId) {\n      orgUnitId\n      orgDimension {\n        orgDimensionId\n        name\n      }\n      name\n      hierarchy\n      parentOrgUnitId\n      downstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          hierarchy\n          parentOrgUnitId\n        }\n      }\n      upstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          modulePropagations {\n            items {\n              modulePropagationId\n              name\n              description\n              moduleGroup {\n                moduleGroupId\n                name\n              }\n              moduleVersion {\n                moduleVersionId\n                name\n              }\n            }\n          }\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgDimensionId\n          orgAccountId\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          name\n          description\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationalUnitDocument,
    "\n  query planExecutionRequest($planExecutionRequestId: ID!) {\n    planExecutionRequest(\n      planExecutionRequestId: $planExecutionRequestId\n      withOutputs: true\n    ) {\n      planExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      planOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n": types.PlanExecutionRequestDocument,
    "\n  mutation createModulePropagationDriftCheckRequest($modulePropagationId: ID!) {\n    createModulePropagationDriftCheckRequest(\n      modulePropagationDriftCheckRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationDriftCheckRequestId\n      status\n    }\n  }\n": types.CreateModulePropagationDriftCheckRequestDocument,
    "\n  mutation createModulePropagationExecutionRequest($modulePropagationId: ID!) {\n    createModulePropagationExecutionRequest(\n      modulePropagationExecutionRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationExecutionRequestId\n      status\n    }\n  }\n": types.CreateModulePropagationExecutionRequestDocument,
    "\n  mutation createTerraformDriftCheckRequest($moduleAssignmentId: ID!) {\n    createTerraformDriftCheckRequest(\n      terraformDriftCheckRequest: { moduleAssignmentId: $moduleAssignmentId }\n    ) {\n      terraformDriftCheckRequestId\n    }\n  }\n": types.CreateTerraformDriftCheckRequestDocument,
    "\n  mutation createTerraformExecutionRequest(\n    $moduleAssignmentId: ID!\n    $destroy: Boolean!\n  ) {\n    createTerraformExecutionRequest(\n      terraformExecutionRequest: {\n        moduleAssignmentId: $moduleAssignmentId\n        destroy: $destroy\n      }\n    ) {\n      terraformExecutionRequestId\n    }\n  }\n": types.CreateTerraformExecutionRequestDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query applyExecutionRequest($applyExecutionRequestId: ID!) {\n    applyExecutionRequest(\n      applyExecutionRequestId: $applyExecutionRequestId\n      withOutputs: true\n    ) {\n      applyExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      applyOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n"): (typeof documents)["\n  query applyExecutionRequest($applyExecutionRequestId: ID!) {\n    applyExecutionRequest(\n      applyExecutionRequestId: $applyExecutionRequestId\n      withOutputs: true\n    ) {\n      applyExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      applyOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation deleteOrganizationalUnitMembership(\n    $orgDimensionId: ID!\n    $orgAccountId: ID!\n  ) {\n    deleteOrganizationalUnitMembership(\n      orgDimensionId: $orgDimensionId\n      orgAccountId: $orgAccountId\n    )\n  }\n"): (typeof documents)["\n  mutation deleteOrganizationalUnitMembership(\n    $orgDimensionId: ID!\n    $orgAccountId: ID!\n  ) {\n    deleteOrganizationalUnitMembership(\n      orgDimensionId: $orgDimensionId\n      orgAccountId: $orgAccountId\n    )\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query moduleAssignment($moduleAssignmentId: ID!) {\n    moduleAssignment(moduleAssignmentId: $moduleAssignmentId) {\n      name\n      modulePropagation {\n        modulePropagationId\n        name\n      }\n      orgAccount {\n        orgAccountId\n        name\n        cloudPlatform\n      }\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      status\n      terraformConfiguration\n      terraformExecutionRequests(limit: 5) {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n      terraformDriftCheckRequests(limit: 5) {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query moduleAssignment($moduleAssignmentId: ID!) {\n    moduleAssignment(moduleAssignmentId: $moduleAssignmentId) {\n      name\n      modulePropagation {\n        modulePropagationId\n        name\n      }\n      orgAccount {\n        orgAccountId\n        name\n        cloudPlatform\n      }\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      status\n      terraformConfiguration\n      terraformExecutionRequests(limit: 5) {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n      terraformDriftCheckRequests(limit: 5) {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query moduleGroups {\n    moduleGroups(limit: 100) {\n      items {\n        moduleGroupId\n        name\n        versions {\n          items {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query moduleGroups {\n    moduleGroups(limit: 100) {\n      items {\n        moduleGroupId\n        name\n        versions {\n          items {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query moduleGroup($moduleGroupId: ID!) {\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      moduleGroupId\n      name\n      versions {\n        items {\n          moduleVersionId\n          name\n          remoteSource\n          terraformVersion\n        }\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n          }\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query moduleGroup($moduleGroupId: ID!) {\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      moduleGroupId\n      name\n      versions {\n        items {\n          moduleVersionId\n          name\n          remoteSource\n          terraformVersion\n        }\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n          }\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagationDriftCheckRequest(\n    $modulePropagationId: ID!\n    $modulePropagationDriftCheckRequestId: ID!\n  ) {\n    modulePropagationDriftCheckRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationDriftCheckRequestId: $modulePropagationDriftCheckRequestId\n    ) {\n      modulePropagationId\n      modulePropagationDriftCheckRequestId\n      requestTime\n      status\n      terraformDriftCheckRequests {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagationDriftCheckRequest(\n    $modulePropagationId: ID!\n    $modulePropagationDriftCheckRequestId: ID!\n  ) {\n    modulePropagationDriftCheckRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationDriftCheckRequestId: $modulePropagationDriftCheckRequestId\n    ) {\n      modulePropagationId\n      modulePropagationDriftCheckRequestId\n      requestTime\n      status\n      terraformDriftCheckRequests {\n        items {\n          terraformDriftCheckRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          syncStatus\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagationExecutionRequest(\n    $modulePropagationId: ID!\n    $modulePropagationExecutionRequestId: ID!\n  ) {\n    modulePropagationExecutionRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationExecutionRequestId: $modulePropagationExecutionRequestId\n    ) {\n      modulePropagationId\n      modulePropagationExecutionRequestId\n      requestTime\n      status\n      terraformExecutionRequests {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagationExecutionRequest(\n    $modulePropagationId: ID!\n    $modulePropagationExecutionRequestId: ID!\n  ) {\n    modulePropagationExecutionRequest(\n      modulePropagationId: $modulePropagationId\n      modulePropagationExecutionRequestId: $modulePropagationExecutionRequestId\n    ) {\n      modulePropagationId\n      modulePropagationExecutionRequestId\n      requestTime\n      status\n      terraformExecutionRequests {\n        items {\n          terraformExecutionRequestId\n          status\n          requestTime\n          destroy\n          moduleAssignment {\n            moduleAssignmentId\n            orgAccount {\n              orgAccountId\n              name\n            }\n          }\n          planExecutionRequest {\n            planExecutionRequestId\n            status\n            requestTime\n          }\n          applyExecutionRequest {\n            applyExecutionRequestId\n            status\n            requestTime\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagation($modulePropagationId: ID!) {\n    modulePropagation(modulePropagationId: $modulePropagationId) {\n      modulePropagationId\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      orgUnitId\n      orgUnit {\n        orgUnitId\n        orgDimensionId\n        name\n        downstreamOrgUnits {\n          items {\n            orgUnitId\n            orgDimensionId\n            name\n          }\n        }\n      }\n      modulePropagationId\n      name\n      description\n      executionRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationExecutionRequestId\n          requestTime\n          status\n        }\n      }\n      driftCheckRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationDriftCheckRequestId\n          requestTime\n          status\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          modulePropagationId\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagation($modulePropagationId: ID!) {\n    modulePropagation(modulePropagationId: $modulePropagationId) {\n      modulePropagationId\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      moduleVersion {\n        moduleVersionId\n        name\n      }\n      orgUnitId\n      orgUnit {\n        orgUnitId\n        orgDimensionId\n        name\n        downstreamOrgUnits {\n          items {\n            orgUnitId\n            orgDimensionId\n            name\n          }\n        }\n      }\n      modulePropagationId\n      name\n      description\n      executionRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationExecutionRequestId\n          requestTime\n          status\n        }\n      }\n      driftCheckRequests(limit: 5) {\n        items {\n          modulePropagationId\n          modulePropagationDriftCheckRequestId\n          requestTime\n          status\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          modulePropagationId\n          orgAccount {\n            orgAccountId\n            name\n          }\n          status\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagationUpdateOptions($moduleGroupId: ID!) {\n    organizationalDimensions(limit: 10000) {\n      items {\n        orgDimensionId\n        name\n        orgUnits(limit: 10000) {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      versions {\n        items {\n          moduleVersionId\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagationUpdateOptions($moduleGroupId: ID!) {\n    organizationalDimensions(limit: 10000) {\n      items {\n        orgDimensionId\n        name\n        orgUnits(limit: 10000) {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroup(moduleGroupId: $moduleGroupId) {\n      versions {\n        items {\n          moduleVersionId\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updateModulePropagation(\n    $modulePropagationId: ID!\n    $update: ModulePropagationUpdate!\n  ) {\n    updateModulePropagation(\n      modulePropagationId: $modulePropagationId\n      update: $update\n    ) {\n      modulePropagationId\n    }\n  }\n"): (typeof documents)["\n  mutation updateModulePropagation(\n    $modulePropagationId: ID!\n    $update: ModulePropagationUpdate!\n  ) {\n    updateModulePropagation(\n      modulePropagationId: $modulePropagationId\n      update: $update\n    ) {\n      modulePropagationId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagations {\n    modulePropagations(limit: 100) {\n      items {\n        modulePropagationId\n        name\n        moduleGroup {\n          moduleGroupId\n          name\n          cloudPlatform\n        }\n        moduleVersion {\n          moduleVersionId\n          name\n        }\n        orgUnit {\n          orgUnitId\n          name\n        }\n        orgDimension {\n          orgDimensionId\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagations {\n    modulePropagations(limit: 100) {\n      items {\n        modulePropagationId\n        name\n        moduleGroup {\n          moduleGroupId\n          name\n          cloudPlatform\n        }\n        moduleVersion {\n          moduleVersionId\n          name\n        }\n        orgUnit {\n          orgUnitId\n          name\n        }\n        orgDimension {\n          orgDimensionId\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query moduleVersion($moduleGroupId: ID!, $moduleVersionId: ID!) {\n    moduleVersion(\n      moduleGroupId: $moduleGroupId\n      moduleVersionId: $moduleVersionId\n    ) {\n      moduleVersionId\n      name\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      remoteSource\n      terraformVersion\n      variables {\n        name\n        type\n        description\n        default\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query moduleVersion($moduleGroupId: ID!, $moduleVersionId: ID!) {\n    moduleVersion(\n      moduleGroupId: $moduleGroupId\n      moduleVersionId: $moduleVersionId\n    ) {\n      moduleVersionId\n      name\n      moduleGroup {\n        moduleGroupId\n        name\n      }\n      remoteSource\n      terraformVersion\n      variables {\n        name\n        type\n        description\n        default\n      }\n      modulePropagations {\n        items {\n          name\n          modulePropagationId\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModuleGroup($moduleGroup: NewModuleGroup!) {\n    createModuleGroup(moduleGroup: $moduleGroup) {\n      moduleGroupId\n    }\n  }\n"): (typeof documents)["\n  mutation createModuleGroup($moduleGroup: NewModuleGroup!) {\n    createModuleGroup(moduleGroup: $moduleGroup) {\n      moduleGroupId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModulePropagation($modulePropagation: NewModulePropagation!) {\n    createModulePropagation(modulePropagation: $modulePropagation) {\n      modulePropagationId\n    }\n  }\n"): (typeof documents)["\n  mutation createModulePropagation($modulePropagation: NewModulePropagation!) {\n    createModulePropagation(modulePropagation: $modulePropagation) {\n      modulePropagationId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query modulePropagationOptions {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroups {\n      items {\n        moduleGroupId\n        name\n        cloudPlatform\n        versions {\n          items {\n            moduleVersionId\n            name\n            variables {\n              name\n              type\n              default\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query modulePropagationOptions {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n    moduleGroups {\n      items {\n        moduleGroupId\n        name\n        cloudPlatform\n        versions {\n          items {\n            moduleVersionId\n            name\n            variables {\n              name\n              type\n              default\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModuleVersion($moduleVersion: NewModuleVersion!) {\n    createModuleVersion(moduleVersion: $moduleVersion) {\n      moduleVersionId\n    }\n  }\n"): (typeof documents)["\n  mutation createModuleVersion($moduleVersion: NewModuleVersion!) {\n    createModuleVersion(moduleVersion: $moduleVersion) {\n      moduleVersionId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createOrganizationalAccount($orgAccount: NewOrganizationalAccount!) {\n    createOrganizationalAccount(orgAccount: $orgAccount) {\n      orgAccountId\n    }\n  }\n"): (typeof documents)["\n  mutation createOrganizationalAccount($orgAccount: NewOrganizationalAccount!) {\n    createOrganizationalAccount(orgAccount: $orgAccount) {\n      orgAccountId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createOrganizationalDimension(\n    $orgDimension: NewOrganizationalDimension!\n  ) {\n    createOrganizationalDimension(orgDimension: $orgDimension) {\n      orgDimensionId\n    }\n  }\n"): (typeof documents)["\n  mutation createOrganizationalDimension(\n    $orgDimension: NewOrganizationalDimension!\n  ) {\n    createOrganizationalDimension(orgDimension: $orgDimension) {\n      orgDimensionId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createOrganizationalUnit($orgUnit: NewOrganizationalUnit!) {\n    createOrganizationalUnit(orgUnit: $orgUnit) {\n      orgUnitId\n    }\n  }\n"): (typeof documents)["\n  mutation createOrganizationalUnit($orgUnit: NewOrganizationalUnit!) {\n    createOrganizationalUnit(orgUnit: $orgUnit) {\n      orgUnitId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createOrganizationalUnitMembership(\n    $orgUnitMembership: NewOrganizationalUnitMembership!\n  ) {\n    createOrganizationalUnitMembership(orgUnitMembership: $orgUnitMembership) {\n      orgUnitId\n    }\n  }\n"): (typeof documents)["\n  mutation createOrganizationalUnitMembership(\n    $orgUnitMembership: NewOrganizationalUnitMembership!\n  ) {\n    createOrganizationalUnitMembership(orgUnitMembership: $orgUnitMembership) {\n      orgUnitId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalDimensionsAndUnits {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalDimensionsAndUnits {\n    organizationalDimensions {\n      items {\n        orgDimensionId\n        name\n        orgUnits {\n          items {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalAccountsAndMemberships {\n    organizationalAccounts {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n        orgUnitMemberships {\n          items {\n            orgDimensionId\n            orgUnitId\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalAccountsAndMemberships {\n    organizationalAccounts {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n        orgUnitMemberships {\n          items {\n            orgDimensionId\n            orgUnitId\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalAccount($orgAccountId: ID!) {\n    organizationalAccount(orgAccountId: $orgAccountId) {\n      orgAccountId\n      name\n      cloudPlatform\n      cloudIdentifier\n      orgUnitMemberships {\n        items {\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          status\n          modulePropagationId\n          orgAccountId\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n            orgUnit {\n              orgUnitId\n              name\n            }\n            orgDimension {\n              orgDimensionId\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalAccount($orgAccountId: ID!) {\n    organizationalAccount(orgAccountId: $orgAccountId) {\n      orgAccountId\n      name\n      cloudPlatform\n      cloudIdentifier\n      orgUnitMemberships {\n        items {\n          orgUnit {\n            orgUnitId\n            name\n          }\n          orgDimension {\n            orgDimensionId\n            name\n          }\n        }\n      }\n      moduleAssignments {\n        items {\n          moduleAssignmentId\n          status\n          modulePropagationId\n          orgAccountId\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n          modulePropagation {\n            modulePropagationId\n            name\n            orgUnit {\n              orgUnitId\n              name\n            }\n            orgDimension {\n              orgDimensionId\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalAccounts {\n    organizationalAccounts(limit: 100) {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalAccounts {\n    organizationalAccounts(limit: 100) {\n      items {\n        orgAccountId\n        name\n        cloudPlatform\n        cloudIdentifier\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalDimension($orgDimensionId: ID!) {\n    organizationalDimension(orgDimensionId: $orgDimensionId) {\n      orgDimensionId\n      name\n      rootOrgUnitId\n      orgUnits {\n        items {\n          orgUnitId\n          name\n          parentOrgUnitId\n          hierarchy\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          moduleGroupId\n          moduleVersionId\n          orgUnitId\n          orgDimensionId\n          name\n          description\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalDimension($orgDimensionId: ID!) {\n    organizationalDimension(orgDimensionId: $orgDimensionId) {\n      orgDimensionId\n      name\n      rootOrgUnitId\n      orgUnits {\n        items {\n          orgUnitId\n          name\n          parentOrgUnitId\n          hierarchy\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          moduleGroupId\n          moduleVersionId\n          orgUnitId\n          orgDimensionId\n          name\n          description\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n          orgUnit {\n            orgUnitId\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalDimensions {\n    organizationalDimensions(limit: 100) {\n      items {\n        orgDimensionId\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalDimensions {\n    organizationalDimensions(limit: 100) {\n      items {\n        orgDimensionId\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query organizationalUnit($orgUnitId: ID!, $orgDimensionId: ID!) {\n    organizationalUnit(orgDimensionId: $orgDimensionId, orgUnitId: $orgUnitId) {\n      orgUnitId\n      orgDimension {\n        orgDimensionId\n        name\n      }\n      name\n      hierarchy\n      parentOrgUnitId\n      downstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          hierarchy\n          parentOrgUnitId\n        }\n      }\n      upstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          modulePropagations {\n            items {\n              modulePropagationId\n              name\n              description\n              moduleGroup {\n                moduleGroupId\n                name\n              }\n              moduleVersion {\n                moduleVersionId\n                name\n              }\n            }\n          }\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgDimensionId\n          orgAccountId\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          name\n          description\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query organizationalUnit($orgUnitId: ID!, $orgDimensionId: ID!) {\n    organizationalUnit(orgDimensionId: $orgDimensionId, orgUnitId: $orgUnitId) {\n      orgUnitId\n      orgDimension {\n        orgDimensionId\n        name\n      }\n      name\n      hierarchy\n      parentOrgUnitId\n      downstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          hierarchy\n          parentOrgUnitId\n        }\n      }\n      upstreamOrgUnits {\n        items {\n          orgUnitId\n          name\n          modulePropagations {\n            items {\n              modulePropagationId\n              name\n              description\n              moduleGroup {\n                moduleGroupId\n                name\n              }\n              moduleVersion {\n                moduleVersionId\n                name\n              }\n            }\n          }\n        }\n      }\n      orgUnitMemberships {\n        items {\n          orgDimensionId\n          orgAccountId\n          orgAccount {\n            orgAccountId\n            name\n            cloudPlatform\n            cloudIdentifier\n          }\n        }\n      }\n      modulePropagations {\n        items {\n          modulePropagationId\n          name\n          description\n          moduleGroup {\n            moduleGroupId\n            name\n          }\n          moduleVersion {\n            moduleVersionId\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query planExecutionRequest($planExecutionRequestId: ID!) {\n    planExecutionRequest(\n      planExecutionRequestId: $planExecutionRequestId\n      withOutputs: true\n    ) {\n      planExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      planOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n"): (typeof documents)["\n  query planExecutionRequest($planExecutionRequestId: ID!) {\n    planExecutionRequest(\n      planExecutionRequestId: $planExecutionRequestId\n      withOutputs: true\n    ) {\n      planExecutionRequestId\n      status\n      requestTime\n      terraformConfigurationBase64\n      initOutput {\n        Stdout\n        Stderr\n      }\n      planOutput {\n        Stdout\n        Stderr\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModulePropagationDriftCheckRequest($modulePropagationId: ID!) {\n    createModulePropagationDriftCheckRequest(\n      modulePropagationDriftCheckRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationDriftCheckRequestId\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation createModulePropagationDriftCheckRequest($modulePropagationId: ID!) {\n    createModulePropagationDriftCheckRequest(\n      modulePropagationDriftCheckRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationDriftCheckRequestId\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createModulePropagationExecutionRequest($modulePropagationId: ID!) {\n    createModulePropagationExecutionRequest(\n      modulePropagationExecutionRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationExecutionRequestId\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation createModulePropagationExecutionRequest($modulePropagationId: ID!) {\n    createModulePropagationExecutionRequest(\n      modulePropagationExecutionRequest: {\n        modulePropagationId: $modulePropagationId\n      }\n    ) {\n      modulePropagationExecutionRequestId\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createTerraformDriftCheckRequest($moduleAssignmentId: ID!) {\n    createTerraformDriftCheckRequest(\n      terraformDriftCheckRequest: { moduleAssignmentId: $moduleAssignmentId }\n    ) {\n      terraformDriftCheckRequestId\n    }\n  }\n"): (typeof documents)["\n  mutation createTerraformDriftCheckRequest($moduleAssignmentId: ID!) {\n    createTerraformDriftCheckRequest(\n      terraformDriftCheckRequest: { moduleAssignmentId: $moduleAssignmentId }\n    ) {\n      terraformDriftCheckRequestId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createTerraformExecutionRequest(\n    $moduleAssignmentId: ID!\n    $destroy: Boolean!\n  ) {\n    createTerraformExecutionRequest(\n      terraformExecutionRequest: {\n        moduleAssignmentId: $moduleAssignmentId\n        destroy: $destroy\n      }\n    ) {\n      terraformExecutionRequestId\n    }\n  }\n"): (typeof documents)["\n  mutation createTerraformExecutionRequest(\n    $moduleAssignmentId: ID!\n    $destroy: Boolean!\n  ) {\n    createTerraformExecutionRequest(\n      terraformExecutionRequest: {\n        moduleAssignmentId: $moduleAssignmentId\n        destroy: $destroy\n      }\n    ) {\n      terraformExecutionRequestId\n    }\n  }\n"];

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function gql(source: string): unknown;

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;